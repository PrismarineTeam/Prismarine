From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alpha <alphakr93@outlook.com>
Date: Mon, 12 Sep 2022 20:11:12 +0900
Subject: [PATCH] Add 1 second tps average in TPS


diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index f9251183df72ddc56662fd3f02acf21641a2200c..e4d169ba4cf6d0bee8242f826825181c7afc4a92 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -58,7 +58,7 @@ public class RAMDetails extends JList<String> {
         GraphData data = RAMGraph.DATA.peekLast();
         Vector<String> vector = new Vector<>();
 
-        double[] tps = new double[] {server.tps5s.getAverage(), server.tps1.getAverage(), server.tps5.getAverage(), server.tps15.getAverage()}; // Purpur
+        double[] tps = new double[] {server.tps1s.getAverage(), server.tps5s.getAverage(), server.tps1.getAverage(), server.tps5.getAverage(), server.tps15.getAverage()}; // Purpur // Prismarine
         String[] tpsAvg = new String[tps.length];
 
         for ( int g = 0; g < tps.length; g++) {
@@ -67,7 +67,7 @@ public class RAMDetails extends JList<String> {
         vector.add("Memory use: " + (data.getUsedMem() / 1024L / 1024L) + " mb (" + (data.getFree() * 100L / data.getMax()) + "% free)");
         vector.add("Heap: " + (data.getTotal() / 1024L / 1024L) + " / " + (data.getMax() / 1024L / 1024L) + " mb");
         vector.add("Avg tick: " + DECIMAL_FORMAT.format(getAverage(server.tickTimes)) + " ms");
-        vector.add("TPS from last 5s, 1m, 5m, 15m: " + String.join(", ", tpsAvg)); // Purpur
+        vector.add("TPS from last 1s, 5s, 1m, 5m, 15m: " + String.join(", ", tpsAvg)); // Purpur // Prismarine
 
         setListData(vector);
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 02c130383c0d26626ae867d1ceaba13517970cf8..752d67399c47475bd546395638892c998e18ab0f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -291,7 +291,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public static final int TPS = 20;
     public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
     private static final int SAMPLE_INTERVAL = 20; // Paper
-    public final double[] recentTps = new double[ 4 ]; // Purpur
+    public final double[] recentTps = new double[ 5 ]; // Purpur // Prismarine
     // Spigot end
     public final io.papermc.paper.configuration.PaperConfigurations paperConfigurations;
     public static long currentTickLong = 0L; // Paper
@@ -1061,6 +1061,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
     private long lastTick = 0;
     private long catchupTime = 0;
+    public final RollingAverage tps1s = new RollingAverage(1); // Prismarine
     public final RollingAverage tps5s = new RollingAverage(5); // Purpur
     public final RollingAverage tps1 = new RollingAverage(60);
     public final RollingAverage tps5 = new RollingAverage(60 * 5);
@@ -1165,19 +1166,23 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 {
                     final long diff = curTime - tickSection;
                     java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP);
-                        tps5s.add(currentTps, diff); // Purpur
+                    tps1s.add(currentTps, diff); // Prismarine
+                    tps5s.add(currentTps, diff); // Purpur // Prismarine
                     tps1.add(currentTps, diff);
                     tps5.add(currentTps, diff);
                     tps15.add(currentTps, diff);
                     // Backwards compat with bad plugins
-                        // Purpur start
-                        this.recentTps[0] = tps5s.getAverage();
-                        this.recentTps[1] = tps1.getAverage();
-                        this.recentTps[2] = tps5.getAverage();
-                        this.recentTps[3] = tps15.getAverage();
-                        // Purpur end
+                    // Prismarine start
+                    // Purpur start
+                    this.recentTps[0] = tps1s.getAverage();
+                    this.recentTps[1] = tps5s.getAverage();
+                    this.recentTps[2] = tps1.getAverage();
+                    this.recentTps[3] = tps5.getAverage();
+                    this.recentTps[4] = tps15.getAverage();
+                    // Purpur end
+                    // Prismarine end
                     // Paper end
-                        lagging = recentTps[0] < org.purpurmc.purpur.PurpurConfig.laggingThreshold; // Purpur
+                    lagging = recentTps[0] < org.purpurmc.purpur.PurpurConfig.laggingThreshold; // Purpur // Prismarine
                     tickSection = curTime;
                 }
                 // Spigot end
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a536c9ffdf191610e4c6f0fe4fde0a142e5f5003..5d5112dd1c9a1122e5031444a0530e2894ffec23 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2796,6 +2796,7 @@ public final class CraftServer implements Server {
     @Override
     public double[] getTPS() {
         return new double[] {
+                net.minecraft.server.MinecraftServer.getServer().tps1s.getAverage(), // Prismarine
                 net.minecraft.server.MinecraftServer.getServer().tps5s.getAverage(), // Purpur
                 net.minecraft.server.MinecraftServer.getServer().tps1.getAverage(),
                 net.minecraft.server.MinecraftServer.getServer().tps5.getAverage(),
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 088239d17aa8178cf8af09ec23cfd4deaaf2bbb6..ed342619fae36b39a571df0bf3b1f8cfa7241516 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -31,7 +31,7 @@ public class TicksPerSecondCommand extends Command
         for ( int i = 0; i < tps.length; i++) {
             tpsAvg[i] = TicksPerSecondCommand.format( tps[i] );
         }
-        sender.sendMessage(ChatColor.GOLD + "TPS from last 5s, 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", ")); // Purpur
+        sender.sendMessage(ChatColor.GOLD + "TPS from last 1s, 5s, 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", ")); // Purpur // Prismarine
         if (args.length > 0 && args[0].equals("mem") && sender.hasPermission("bukkit.command.tpsmemory")) {
             sender.sendMessage(ChatColor.GOLD + "Current Memory Usage: " + ChatColor.GREEN + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (1024 * 1024)) + "/" + (Runtime.getRuntime().totalMemory() / (1024 * 1024)) + " mb (Max: " + (Runtime.getRuntime().maxMemory() / (1024 * 1024)) + " mb)");
             if (!hasShownMemoryWarning) {
