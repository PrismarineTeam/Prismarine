From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sat, 23 Jul 2022 23:30:08 +0900
Subject: [PATCH] Slice Server Patches

Original by Cryptite <cryptite@gmail.com>

Copyright (C) 2022 Cryptite

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
Software), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

[ADDED PATCHES]
0004 - Don't send equipment updates if only durability changed
0006 - Don't send fire packets if player has Fire Resistance
0012 - Packet obfuscation and reduction

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index 3e17f6131bf590d7c4a16b79c1c145cb4f565bc9..e1233fa58d068448d0accef7a7f6725fcb902848 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -22,6 +22,13 @@ public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketLi
 
     }
 
+    // Slice start
+    public ClientboundSetEntityDataPacket(int id, List<SynchedEntityData.DataItem<?>> packedItems) {
+        this.id = id;
+        this.packedItems = packedItems;
+    }
+    // Slice end
+
     public ClientboundSetEntityDataPacket(FriendlyByteBuf buf) {
         this.id = buf.readVarInt();
         this.packedItems = SynchedEntityData.unpack(buf);
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index 1c4e812c8b3f85ac5d69b637eb43d4b9751ad150..03b6ad0064d1d201f317f1c168f07834615b746b 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -137,6 +137,12 @@ public class SynchedEntityData {
     }
 
     public <T> void set(EntityDataAccessor<T> key, T value) {
+        // Prismarine start - Slice patches
+        set(key, value, null);
+    }
+
+    public <T> void set(EntityDataAccessor<T> key, T value, @Nullable T foreignValue) {
+        // Prismarine end
         SynchedEntityData.DataItem<T> datawatcher_item = this.getItem(key);
 
         if (ObjectUtils.notEqual(value, datawatcher_item.getValue())) {
@@ -146,6 +152,11 @@ public class SynchedEntityData {
             this.isDirty = true;
         }
 
+        // Slice start
+        if (foreignValue != null && ObjectUtils.notEqual(foreignValue, datawatcher_item.getForeignValue())) {
+            datawatcher_item.setForeignValue(foreignValue);
+        }
+        // Slice end
     }
 
     // CraftBukkit start - add method from above
@@ -201,6 +212,28 @@ public class SynchedEntityData {
         return list;
     }
 
+    // Slice start
+    @Nullable
+    public List<SynchedEntityData.DataItem<?>> packForeignDirty(List<DataItem<?>> unpackedData) {
+        List<SynchedEntityData.DataItem<?>> list = null;
+
+        for (DataItem<?> dataItem : unpackedData) {
+            DataItem<?> item = itemsById.get(dataItem.accessor.getId());
+            if (item.isDirty(true)) {
+                item.setForeignDirty(false);
+
+                if (list == null) {
+                    list = Lists.newArrayList();
+                }
+
+                list.add(item.copy(true));
+            }
+        }
+
+        return list;
+    }
+    // Slice end
+
     @Nullable
     public List<SynchedEntityData.DataItem<?>> getAll() {
         List<SynchedEntityData.DataItem<?>> list = null;
@@ -314,11 +347,14 @@ public class SynchedEntityData {
         final EntityDataAccessor<T> accessor;
         T value;
         private boolean dirty;
+        @Nullable T foreignValue = null; // Slice
+        private boolean foreignDirty; // Slice
 
         public DataItem(EntityDataAccessor<T> data, T value) {
             this.accessor = data;
             this.value = value;
             this.dirty = true;
+            this.foreignDirty = true; // Slice
         }
 
         public EntityDataAccessor<T> getAccessor() {
@@ -344,5 +380,34 @@ public class SynchedEntityData {
         public SynchedEntityData.DataItem<T> copy() {
             return new SynchedEntityData.DataItem<>(this.accessor, this.accessor.getSerializer().copy(this.value));
         }
+
+        // Slice start
+        public void setForeignValue(T foreignValue) {
+            this.foreignValue = foreignValue;
+            this.foreignDirty = true;
+        }
+
+        public @Nullable T getForeignValue() {
+            return foreignValue;
+        }
+
+        public boolean isDirty(boolean foreign) {
+            if (foreign) {
+                //There must be a foreign value in order for this to be dirty, otherwise we consider this a normal
+                //value and check the normal dirty flag.
+                return foreignValue == null || this.foreignDirty;
+            }
+
+            return this.dirty;
+        }
+
+        public void setForeignDirty(boolean dirty) {
+            this.foreignDirty = dirty;
+        }
+
+        public SynchedEntityData.DataItem<T> copy(boolean foreign) {
+            return new SynchedEntityData.DataItem<>(this.accessor, this.accessor.getSerializer().copy((foreign && this.foreignValue != null ? this.foreignValue : this.value)));
+        }
+        // Slice end
     }
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 3441339e1ba5efb0e25c16fa13cb65d2fbdafc42..869b85b4c482d8bd0a48b948cffcf36289bceab0 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -362,6 +362,21 @@ public class ServerEntity {
         SynchedEntityData datawatcher = this.entity.getEntityData();
 
         if (datawatcher.isDirty()) {
+            // Prismarine start - Slice tweaks
+            if (this.level.prismarineConfig.useSlicePacketSystem) {
+                ClientboundSetEntityDataPacket dataPacket = new ClientboundSetEntityDataPacket(this.entity.getId(), datawatcher, false);
+                if (this.entity instanceof ServerPlayer serverPlayer) {
+                    serverPlayer.connection.send(dataPacket);
+                }
+
+                //Get the packedData that the original packet has, and then determine if any of those are changed in
+                //the foreign version. If null, nothing to notify foreign trackers about.
+                List<SynchedEntityData.DataItem<?>> dirtyItems = datawatcher.packForeignDirty(dataPacket.getUnpackedData());
+                if (dirtyItems != null) {
+                    this.broadcast(new ClientboundSetEntityDataPacket(this.entity.getId(), dirtyItems));
+                }
+            } else
+            // Prismarine end
             this.broadcastAndSend(new ClientboundSetEntityDataPacket(this.entity.getId(), datawatcher, false));
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index aa8f664ae1bba9729d146efadb8fd46ba03c2db9..0f385b2f877627e70f68b80e80e2754387619f76 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -879,6 +879,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
         this.checkOutOfWorld();
         if (!this.level.isClientSide) {
+            // Prismarine start - Slice tweaks
+            if (this instanceof ServerPlayer serverPlayer) {
+                if (this.level.prismarineConfig.doNotSendFirePacketsIfPlayerHasFireResistance) this.setSharedFlagOnFire(this.remainingFireTicks > 0 && !serverPlayer.hasEffect(net.minecraft.world.effect.MobEffects.FIRE_RESISTANCE));
+                else if (this.level.prismarineConfig.doNotSendFirePacketsIfPlayerIsCreative) this.setSharedFlagOnFire(this.remainingFireTicks > 0 && !serverPlayer.isCreative());
+                else this.setSharedFlagOnFire(this.remainingFireTicks > 0);
+            } else this.setSharedFlagOnFire(this.remainingFireTicks > 0);
+            // Prismarine end
+
             this.setSharedFlagOnFire(this.remainingFireTicks > 0);
         }
 
@@ -3148,7 +3156,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             this.entityData.markDirty(Entity.DATA_AIR_SUPPLY_ID);
             return;
         }
-        this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, event.getAmount());
+        this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, event.getAmount(), getMaxAirSupply()); // Prismarine - Slice patches
         // CraftBukkit end
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index e0a5f41477c63c801b3205b04ff3824c96c21311..4bfc563ca6590407973b13433e1d1686261220b9 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3155,7 +3155,7 @@ public abstract class LivingEntity extends Entity {
 
             ItemStack itemstack1 = this.getItemBySlot(enumitemslot);
 
-            if (!ItemStack.matches(itemstack1, itemstack)) {
+            if (this.level.prismarineConfig.doNotSendEquipmentUpdatesIfOnlyDurabilityChanges ? !ItemStack.isSameIgnoreDurability(itemstack1, itemstack) : !ItemStack.matches(itemstack1, itemstack)) { // Prismarine - Slice tweaks
                 // Paper start - PlayerArmorChangeEvent
                 if (this instanceof ServerPlayer && enumitemslot.getType() == EquipmentSlot.Type.ARMOR) {
                     final org.bukkit.inventory.ItemStack oldItem = CraftItemStack.asBukkitCopy(itemstack);
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 64ca2c92c4908bbb0272d1c22870af68aa9daad2..f669386d8b17f78006917869a8393173b676c448 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -682,7 +682,7 @@ public abstract class Player extends LivingEntity {
     public void increaseScore(int score) {
         int j = this.getScore();
 
-        this.entityData.set(Player.DATA_SCORE_ID, j + score);
+        this.entityData.set(Player.DATA_SCORE_ID, j + score, 0);
     }
 
     public void startAutoSpinAttack(int riptideTicks) {
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
index c66135f75f95a10dd49cfb67ed8d84317715193d..1aa9cc0c1d994f6c702360ae95a6a1c087aa498a 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
@@ -79,4 +79,21 @@ public class PrismarineWorldConfig {
     private void fishingRodLength() {
         fishingRodLength = getDouble("fishing-rod-length", fishingRodLength);
     }
+
+    public boolean doNotSendEquipmentUpdatesIfOnlyDurabilityChanges = false;
+    private void doNotSendEquipmentUpdatesIfOnlyDurabilityChanged() {
+        doNotSendEquipmentUpdatesIfOnlyDurabilityChanges = getBoolean("do-not-send-equipment-updates-if-only-durability-changes", doNotSendEquipmentUpdatesIfOnlyDurabilityChanges);
+    }
+
+    public boolean doNotSendFirePacketsIfPlayerHasFireResistance = true;
+    public boolean doNotSendFirePacketsIfPlayerIsCreative = true;
+    private void fixFireDisplay() {
+        doNotSendFirePacketsIfPlayerHasFireResistance = getBoolean("do-not-send-fire-packets.if-player-has-fire-resistance", doNotSendFirePacketsIfPlayerHasFireResistance);
+        doNotSendFirePacketsIfPlayerIsCreative = getBoolean("do-not-send-fire-packets.if-player-is-creative", doNotSendFirePacketsIfPlayerHasFireResistance);
+    }
+
+    public boolean useSlicePacketSystem = false;
+    private void useSlicePacketSystem() {
+        useSlicePacketSystem = getBoolean("use-slice-packet-system", useSlicePacketSystem);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index e8e47b23707988a821951896cb8877cf14f56220..e0687eec6e2f02a8e540f84c9c709b02b7f603bc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2384,7 +2384,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 this.sendHealthUpdate();
             }
         }
-        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, (float) this.getScaledHealth());
+        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, (float) this.getScaledHealth(), isDead() ? 0f : 20f); // Prismarine - Slice patches
 
         this.getHandle().maxHealthCache = getMaxHealth();
     }
