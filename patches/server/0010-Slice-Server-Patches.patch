From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sat, 23 Jul 2022 23:30:08 +0900
Subject: [PATCH] Slice Server Patches

Original by Cryptite <cryptite@gmail.com>

Copyright (C) 2022 Cryptite

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
Software), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

[ADDED PATCHES]
0004 - Ignore durability change equipment updates
0006 - Don't send fire packets if player has FR
0011 - Packet obfuscation and reduction

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index 3e17f6131bf590d7c4a16b79c1c145cb4f565bc9..e1233fa58d068448d0accef7a7f6725fcb902848 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -22,6 +22,13 @@ public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketLi
 
     }
 
+    // Slice start
+    public ClientboundSetEntityDataPacket(int id, List<SynchedEntityData.DataItem<?>> packedItems) {
+        this.id = id;
+        this.packedItems = packedItems;
+    }
+    // Slice end
+
     public ClientboundSetEntityDataPacket(FriendlyByteBuf buf) {
         this.id = buf.readVarInt();
         this.packedItems = SynchedEntityData.unpack(buf);
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index 1c4e812c8b3f85ac5d69b637eb43d4b9751ad150..03b6ad0064d1d201f317f1c168f07834615b746b 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -137,6 +137,12 @@ public class SynchedEntityData {
     }
 
     public <T> void set(EntityDataAccessor<T> key, T value) {
+        // Prismarine start - Slice patches
+        set(key, value, null);
+    }
+
+    public <T> void set(EntityDataAccessor<T> key, T value, @Nullable T foreignValue) {
+        // Prismarine end
         SynchedEntityData.DataItem<T> datawatcher_item = this.getItem(key);
 
         if (ObjectUtils.notEqual(value, datawatcher_item.getValue())) {
@@ -146,6 +152,11 @@ public class SynchedEntityData {
             this.isDirty = true;
         }
 
+        // Slice start
+        if (foreignValue != null && ObjectUtils.notEqual(foreignValue, datawatcher_item.getForeignValue())) {
+            datawatcher_item.setForeignValue(foreignValue);
+        }
+        // Slice end
     }
 
     // CraftBukkit start - add method from above
@@ -201,6 +212,28 @@ public class SynchedEntityData {
         return list;
     }
 
+    // Slice start
+    @Nullable
+    public List<SynchedEntityData.DataItem<?>> packForeignDirty(List<DataItem<?>> unpackedData) {
+        List<SynchedEntityData.DataItem<?>> list = null;
+
+        for (DataItem<?> dataItem : unpackedData) {
+            DataItem<?> item = itemsById.get(dataItem.accessor.getId());
+            if (item.isDirty(true)) {
+                item.setForeignDirty(false);
+
+                if (list == null) {
+                    list = Lists.newArrayList();
+                }
+
+                list.add(item.copy(true));
+            }
+        }
+
+        return list;
+    }
+    // Slice end
+
     @Nullable
     public List<SynchedEntityData.DataItem<?>> getAll() {
         List<SynchedEntityData.DataItem<?>> list = null;
@@ -314,11 +347,14 @@ public class SynchedEntityData {
         final EntityDataAccessor<T> accessor;
         T value;
         private boolean dirty;
+        @Nullable T foreignValue = null; // Slice
+        private boolean foreignDirty; // Slice
 
         public DataItem(EntityDataAccessor<T> data, T value) {
             this.accessor = data;
             this.value = value;
             this.dirty = true;
+            this.foreignDirty = true; // Slice
         }
 
         public EntityDataAccessor<T> getAccessor() {
@@ -344,5 +380,34 @@ public class SynchedEntityData {
         public SynchedEntityData.DataItem<T> copy() {
             return new SynchedEntityData.DataItem<>(this.accessor, this.accessor.getSerializer().copy(this.value));
         }
+
+        // Slice start
+        public void setForeignValue(T foreignValue) {
+            this.foreignValue = foreignValue;
+            this.foreignDirty = true;
+        }
+
+        public @Nullable T getForeignValue() {
+            return foreignValue;
+        }
+
+        public boolean isDirty(boolean foreign) {
+            if (foreign) {
+                //There must be a foreign value in order for this to be dirty, otherwise we consider this a normal
+                //value and check the normal dirty flag.
+                return foreignValue == null || this.foreignDirty;
+            }
+
+            return this.dirty;
+        }
+
+        public void setForeignDirty(boolean dirty) {
+            this.foreignDirty = dirty;
+        }
+
+        public SynchedEntityData.DataItem<T> copy(boolean foreign) {
+            return new SynchedEntityData.DataItem<>(this.accessor, this.accessor.getSerializer().copy((foreign && this.foreignValue != null ? this.foreignValue : this.value)));
+        }
+        // Slice end
     }
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 3441339e1ba5efb0e25c16fa13cb65d2fbdafc42..5f209e0dcd42ad0af8aa2252f7cc19a53588c2ae 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -362,6 +362,21 @@ public class ServerEntity {
         SynchedEntityData datawatcher = this.entity.getEntityData();
 
         if (datawatcher.isDirty()) {
+            // Prismarine start - Slice tweaks
+            if (net.prismarineteam.prismarine.PrismarineConfig.useSlicePacketSystem) {
+                ClientboundSetEntityDataPacket dataPacket = new ClientboundSetEntityDataPacket(this.entity.getId(), datawatcher, false);
+                if (this.entity instanceof ServerPlayer serverPlayer) {
+                    serverPlayer.connection.send(dataPacket);
+                }
+
+                //Get the packedData that the original packet has, and then determine if any of those are changed in
+                //the foreign version. If null, nothing to notify foreign trackers about.
+                List<SynchedEntityData.DataItem<?>> dirtyItems = datawatcher.packForeignDirty(dataPacket.getUnpackedData());
+                if (dirtyItems != null) {
+                    this.broadcast(new ClientboundSetEntityDataPacket(this.entity.getId(), dirtyItems));
+                }
+            } else
+            // Prismarine end
             this.broadcastAndSend(new ClientboundSetEntityDataPacket(this.entity.getId(), datawatcher, false));
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index e7b87ec28ba1be5e8ff471a8fcb75bfa7e77e2a2..874be94c4a7611c7924fbfa59c318e5b8a15d3c9 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -879,6 +879,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
         this.checkOutOfWorld();
         if (!this.level.isClientSide) {
+            // Prismarine start - Slice tweaks
+            if (this instanceof ServerPlayer serverPlayer) {
+                if (net.prismarineteam.prismarine.PrismarineConfig.doNotSendFirePacketsIfPlayerHasFireResistance) this.setSharedFlagOnFire(this.remainingFireTicks > 0 && !serverPlayer.hasEffect(net.minecraft.world.effect.MobEffects.FIRE_RESISTANCE));
+                else if (net.prismarineteam.prismarine.PrismarineConfig.doNotSendFirePacketsIfPlayerIsCreative) this.setSharedFlagOnFire(this.remainingFireTicks > 0 && !serverPlayer.isCreative());
+                else this.setSharedFlagOnFire(this.remainingFireTicks > 0);
+            } else this.setSharedFlagOnFire(this.remainingFireTicks > 0);
+            // Prismarine end
+
             this.setSharedFlagOnFire(this.remainingFireTicks > 0);
         }
 
@@ -3157,7 +3165,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             this.entityData.markDirty(Entity.DATA_AIR_SUPPLY_ID);
             return;
         }
-        this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, event.getAmount());
+        this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, event.getAmount(), getMaxAirSupply()); // Prismarine - Slice patches
         // CraftBukkit end
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 5b5e91a4fd837093d012845a9024a5884b0fd209..a8e16d71225ba14a736b96f2818a4b29b72bb725 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3153,7 +3153,7 @@ public abstract class LivingEntity extends Entity {
 
             ItemStack itemstack1 = this.getItemBySlot(enumitemslot);
 
-            if (!ItemStack.matches(itemstack1, itemstack)) {
+            if (net.prismarineteam.prismarine.PrismarineConfig.doNotSendEquipmentUpdatesIfOnlyDurabilityChanges ? !ItemStack.isSameIgnoreDurability(itemstack1, itemstack) : !ItemStack.matches(itemstack1, itemstack)) { // Prismarine - Slice tweaks
                 // Paper start - PlayerArmorChangeEvent
                 if (this instanceof ServerPlayer && enumitemslot.getType() == EquipmentSlot.Type.ARMOR) {
                     final org.bukkit.inventory.ItemStack oldItem = CraftItemStack.asBukkitCopy(itemstack);
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index e87a436711e179a4384630de41188c09a75a7f0d..b78907c5f8b247e4553da14fedc7f28ddabec20c 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -682,7 +682,7 @@ public abstract class Player extends LivingEntity {
     public void increaseScore(int score) {
         int j = this.getScore();
 
-        this.entityData.set(Player.DATA_SCORE_ID, j + score);
+        this.entityData.set(Player.DATA_SCORE_ID, j + score, 0);
     }
 
     public void startAutoSpinAttack(int riptideTicks) {
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
index da4b140a10687dde0e40da12baf68d63cfb2271e..303562950584279ffc6413a84bb22117a2aed5c6 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
@@ -200,4 +200,21 @@ public class PrismarineConfig {
     private static void useAsyncExecutorAtAuthencatorPool() {
         useAsyncExecutorAtAuthencatorPool = getBoolean("settings.use-async-executor-at-authencator-pool", useAsyncExecutorAtAuthencatorPool);
     }
+
+    public static boolean doNotSendEquipmentUpdatesIfOnlyDurabilityChanges = false;
+    private static void doNotSendEquipmentUpdatesIfOnlyDurabilityChanged() {
+        doNotSendEquipmentUpdatesIfOnlyDurabilityChanges = getBoolean("settings.do-not-send-equipment-updates-if-only-durability-changes", doNotSendEquipmentUpdatesIfOnlyDurabilityChanges);
+    }
+
+    public static boolean doNotSendFirePacketsIfPlayerHasFireResistance = true;
+    public static boolean doNotSendFirePacketsIfPlayerIsCreative = true;
+    private static void fixFireDisplay() {
+        doNotSendFirePacketsIfPlayerHasFireResistance = getBoolean("settings.do-not-send-fire-packets.if-player-has-fire-resistance", doNotSendFirePacketsIfPlayerHasFireResistance);
+        doNotSendFirePacketsIfPlayerIsCreative = getBoolean("settings.do-not-send-fire-packets.if-player-is-creative", doNotSendFirePacketsIfPlayerHasFireResistance);
+    }
+
+    public static boolean useSlicePacketSystem = false;
+    private static void useSlicePacketSystem() {
+        useSlicePacketSystem = getBoolean("settings.use-slice-packet-system", useSlicePacketSystem);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index bd363cd808f294f47298258ee7b99aeb36150887..124d8b8e6083fb1015e61ce5b7af387221255acd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2388,7 +2388,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 this.sendHealthUpdate();
             }
         }
-        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, (float) this.getScaledHealth());
+        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, (float) this.getScaledHealth(), isDead() ? 0f : 20f); // Prismarine - Slice patches
 
         this.getHandle().maxHealthCache = getMaxHealth();
     }
