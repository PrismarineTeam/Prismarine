From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alpha <alphakr93@outlook.com>
Date: Sat, 5 Mar 2022 12:27:53 +0900
Subject: [PATCH] Miscellaneous patches


diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishVersionFetcher.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishVersionFetcher.java
deleted file mode 100644
index e877921370f6009a4bd204d9b17d2d58834b8822..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishVersionFetcher.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package gg.pufferfish.pufferfish;
-
-import static net.kyori.adventure.text.Component.text;
-import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
-import static net.kyori.adventure.text.format.NamedTextColor.RED;
-
-import com.destroystokyo.paper.VersionHistoryManager;
-import com.destroystokyo.paper.util.VersionFetcher;
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
-import java.io.IOException;
-import java.net.URI;
-import java.net.http.HttpClient;
-import java.net.http.HttpRequest;
-import java.net.http.HttpResponse;
-import java.nio.charset.StandardCharsets;
-import java.util.concurrent.TimeUnit;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.JoinConfiguration;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.format.TextDecoration;
-import org.bukkit.craftbukkit.CraftServer;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-public class PufferfishVersionFetcher implements VersionFetcher {
-	
-	private static final Logger LOGGER = Logger.getLogger("PufferfishVersionFetcher");
-	private static final HttpClient client = HttpClient.newHttpClient();
-	
-	private static final URI JENKINS_URI = URI.create("https://ci.pufferfish.host/job/Pufferfish-1.19/lastSuccessfulBuild/buildNumber");
-	private static final String GITHUB_FORMAT = "https://api.github.com/repos/pufferfish-gg/Pufferfish/compare/ver/1.19...%s";
-	
-	private static final HttpResponse.BodyHandler<JsonObject> JSON_OBJECT_BODY_HANDLER = responseInfo -> HttpResponse.BodySubscribers
-			.mapping(
-					HttpResponse.BodySubscribers.ofString(StandardCharsets.UTF_8),
-					string -> new Gson().fromJson(string, JsonObject.class)
-			);
-	
-	@Override
-	public long getCacheTime() {
-		return TimeUnit.MINUTES.toMillis(30);
-	}
-	
-	@Override
-	public @NotNull Component getVersionMessage(final @NotNull String serverVersion) {
-		final String[] parts = CraftServer.class.getPackage().getImplementationVersion().split("-");
-		@NotNull Component component;
-		
-		if (parts.length != 3) {
-			component = text("Unknown server version.", RED);
-		} else {
-			final String versionString = parts[2];
-			
-			try {
-				component = this.fetchJenkinsVersion(Integer.parseInt(versionString));
-			} catch (NumberFormatException e) {
-				component = this.fetchGithubVersion(versionString.substring(1, versionString.length() - 1));
-			}
-		}
-		
-		final @Nullable Component history = this.getHistory();
-		return history != null ? Component
-				.join(JoinConfiguration.noSeparators(), component, Component.newline(), this.getHistory()) : component;
-	}
-	
-	private @NotNull Component fetchJenkinsVersion(final int versionNumber) {
-		final HttpRequest request = HttpRequest.newBuilder(JENKINS_URI).build();
-		try {
-			final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
-			if (response.statusCode() != 200) {
-				return text("Received invalid status code (" + response.statusCode() + ") from server.", RED);
-			}
-			
-			int latestVersionNumber;
-			try {
-				latestVersionNumber = Integer.parseInt(response.body());
-			} catch (NumberFormatException e) {
-				LOGGER.log(Level.WARNING, "Received invalid response from Jenkins \"" + response.body() + "\".");
-				return text("Received invalid response from server.", RED);
-			}
-			
-			final int versionDiff = latestVersionNumber - versionNumber;
-			return this.getResponseMessage(versionDiff);
-		} catch (IOException | InterruptedException e) {
-			LOGGER.log(Level.WARNING, "Failed to look up version from Jenkins", e);
-			return text("Failed to retrieve version from server.", RED);
-		}
-	}
-	
-	// Based off code contributed by Techcable <Techcable@outlook.com> in Paper/GH-65
-	private @NotNull Component fetchGithubVersion(final @NotNull String hash) {
-		final URI uri = URI.create(String.format(GITHUB_FORMAT, hash));
-		final HttpRequest request = HttpRequest.newBuilder(uri).build();
-		try {
-			final HttpResponse<JsonObject> response = client.send(request, JSON_OBJECT_BODY_HANDLER);
-			if (response.statusCode() != 200) {
-				return text("Received invalid status code (" + response.statusCode() + ") from server.", RED);
-			}
-			
-			final JsonObject obj = response.body();
-			final int versionDiff = obj.get("behind_by").getAsInt();
-			
-			return this.getResponseMessage(versionDiff);
-		} catch (IOException | InterruptedException e) {
-			LOGGER.log(Level.WARNING, "Failed to look up version from GitHub", e);
-			return text("Failed to retrieve version from server.", RED);
-		}
-	}
-	
-	private @NotNull Component getResponseMessage(final int versionDiff) {
-		return switch (Math.max(-1, Math.min(1, versionDiff))) {
-			case -1 -> text("You are running an unsupported version of Pufferfish.", RED);
-			case 0 -> text("You are on the latest version!", GREEN);
-			default -> text("You are running " + versionDiff + " version" + (versionDiff == 1 ? "" : "s") + " beyond. " +
-							"Please update your server when possible to maintain stability, security, and receive the latest optimizations.",
-					RED);
-		};
-	}
-	
-	private @Nullable Component getHistory() {
-		final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
-		if (data == null) {
-			return null;
-		}
-		
-		final String oldVersion = data.getOldVersion();
-		if (oldVersion == null) {
-			return null;
-		}
-		
-		return Component.text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
-	}
-}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index a7b6e22daf64abca311bc5771192a3c09368537f..580c0d76bdedd83be29500d64816a129e270fbc3 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -541,7 +541,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
     @Nullable
     public CompoundTag readNbt() {
-        return this.readNbt(new NbtAccounter(2097152L));
+        return this.readNbt(new NbtAccounter(2_000_000_000L)); // Prismarine - Fix MC-185901
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/network/PacketEncoder.java b/src/main/java/net/minecraft/network/PacketEncoder.java
index 5fce1177e7198d791d4ab1c64b394c5b1c145782..398efde704d0e74464ae2d390e6ddb48820f839d 100644
--- a/src/main/java/net/minecraft/network/PacketEncoder.java
+++ b/src/main/java/net/minecraft/network/PacketEncoder.java
@@ -66,7 +66,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
     }
 
     // Paper start
-    private static int MAX_PACKET_SIZE = 2097152;
+    private static int MAX_PACKET_SIZE = 2000000000; // Prismarine - Fix MC-185901
 
     public static class PacketTooLargeException extends RuntimeException {
         private final Packet<?> packet;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomPayloadPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomPayloadPacket.java
index 3eee2ebaee415cde427eb72f61a3c67ed5cc0e30..97115c2c5fdbea7f73b2eb81093dfae61d84dcde 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomPayloadPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCustomPayloadPacket.java
@@ -5,7 +5,7 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceLocation;
 
 public class ClientboundCustomPayloadPacket implements Packet<ClientGamePacketListener> {
-    private static final int MAX_PAYLOAD_SIZE = 1048576;
+    private static final int MAX_PAYLOAD_SIZE = 2000000000; // Prismarine - Fix MC-185901
     public static final ResourceLocation BRAND = new ResourceLocation("brand");
     public static final ResourceLocation DEBUG_PATHFINDING_PACKET = new ResourceLocation("debug/path");
     public static final ResourceLocation DEBUG_NEIGHBORSUPDATE_PACKET = new ResourceLocation("debug/neighbors_update");
@@ -30,18 +30,18 @@ public class ClientboundCustomPayloadPacket implements Packet<ClientGamePacketLi
     public ClientboundCustomPayloadPacket(ResourceLocation channel, FriendlyByteBuf data) {
         this.identifier = channel;
         this.data = data;
-        if (data.writerIndex() > 1048576) {
-            throw new IllegalArgumentException("Payload may not be larger than 1048576 bytes");
+        if (data.writerIndex() > MAX_PAYLOAD_SIZE) { // Prismarine - Fix MC-185901
+            throw new IllegalArgumentException("Payload may not be larger than " + MAX_PAYLOAD_SIZE + " bytes"); // Prismarine - Fix MC-185901
         }
     }
 
     public ClientboundCustomPayloadPacket(FriendlyByteBuf buf) {
         this.identifier = buf.readResourceLocation();
         int i = buf.readableBytes();
-        if (i >= 0 && i <= 1048576) {
+        if (i >= 0 && i <= MAX_PAYLOAD_SIZE) { // Prismarine - Fix MC-185901
             this.data = new FriendlyByteBuf(buf.readBytes(i));
         } else {
-            throw new IllegalArgumentException("Payload may not be larger than 1048576 bytes");
+            throw new IllegalArgumentException("Payload may not be larger than " + MAX_PAYLOAD_SIZE + " bytes"); // Prismarine - Fix MC-185901
         }
     }
 
diff --git a/src/main/java/org/purpurmc/purpur/PurpurConfig.java b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
index 0797dbf646550aa34b2b5d3fe9ab676740dfaf44..8dfd4f3a008c9f8b677cf60da5c9dc53be947ebb 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
@@ -49,7 +49,11 @@ public class PurpurConfig {
             + "join us in our Discord guild.\n"
             + "\n"
             + "Website: https://purpurmc.org \n"
-            + "Docs: https://purpurmc.org/docs \n";
+            // Prismarine start - Food properties information
+            + "Docs: https://purpurmc.org/docs \n"
+            + "\n"
+            + "Checks here for configuration on food properties: https://gist.github.com/BillyGalbreath/4fdfba991bd020e814eabf5143e3b225 \n";
+            // Prismarine end
     private static File CONFIG_FILE;
     public static YamlConfiguration config;
 
