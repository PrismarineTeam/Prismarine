From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sun, 10 Jul 2022 18:24:19 +0900
Subject: [PATCH] Implement FixMySpawnR

Original by AbsolemJackdaw - FixMySpawnR

CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
HEREUNDER.

diff --git a/src/main/java/net/minecraft/world/level/BaseSpawner.java b/src/main/java/net/minecraft/world/level/BaseSpawner.java
index f0b0e19ed20967cae12195707007532fbab185f8..5ad659c4af922cb7d928968e453984a84416f32c 100644
--- a/src/main/java/net/minecraft/world/level/BaseSpawner.java
+++ b/src/main/java/net/minecraft/world/level/BaseSpawner.java
@@ -43,6 +43,8 @@ public abstract class BaseSpawner {
     public int requiredPlayerRange = 16;
     public int spawnRange = 4;
     private int tickDelay = 0; // Paper
+    private int blockExistsTick = 0; // Prismarine
+    private boolean blockLockedByTime = false; // Prismarine
 
     public BaseSpawner() {}
 
@@ -78,6 +80,16 @@ public abstract class BaseSpawner {
     }
 
     public void serverTick(ServerLevel world, BlockPos pos) {
+        // Prismarine start
+        if (!blockLockedByTime) {
+            if (blockExistsTick > world.prismarineConfig.timerTimeOut) {
+                blockLockedByTime = true;
+            } else {
+                blockExistsTick++;
+            }
+        }
+        if (blockLockedByTime && world.getBestNeighborSignal(pos) > 0) return;
+        // Prismarine end
         if (spawnCount <= 0 || maxNearbyEntities <= 0) return; // Paper - Ignore impossible spawn tick
         // Paper start - Configurable mob spawner tick rate
         if (spawnDelay > 0 && --tickDelay > 0) return;
@@ -301,6 +313,11 @@ public abstract class BaseSpawner {
             this.spawnRange = nbt.getShort("SpawnRange");
         }
 
+        if (nbt.contains("fixMySpawnerLocked")) {
+            this.blockLockedByTime = nbt.getBoolean("fixMySpawnerLocked");
+            this.blockExistsTick = nbt.getInt("fixMySpawnRTicks");
+        }
+
         this.displayEntity = null;
     }
 
@@ -327,6 +344,8 @@ public abstract class BaseSpawner {
             return new IllegalStateException("Invalid SpawnData");
         }));
         nbt.put("SpawnPotentials", (Tag) SpawnData.LIST_CODEC.encodeStart(NbtOps.INSTANCE, this.spawnPotentials).result().orElseThrow());
+        nbt.putBoolean("fixMySpawnerLocked", blockLockedByTime); // Prismarine
+        nbt.putInt("fixMySpawnRTicks", blockExistsTick); // Prismarine
         return nbt;
     }
 
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
index 17471282fd5820705b24a88888495d33d81b492c..2b79fbb3387fb1026dfcd56e906bb315b335a2ea 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
@@ -84,4 +84,9 @@ public class PrismarineWorldConfig {
     private void despawnMobWhenNoPlayerIsOnRange() {
         despawnMobWhenNoPlayerIsOnRange = getBoolean("despawn-mob-when-no-player-is-on-range", despawnMobWhenNoPlayerIsOnRange);
     }
+
+    public int timerTimeOut = 0;
+    private void timerTimeOut() {
+        timerTimeOut = getInt("timer-time-out", timerTimeOut);
+    }
 }
\ No newline at end of file
