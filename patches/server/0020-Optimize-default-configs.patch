From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sun, 10 Jul 2022 18:59:37 +0900
Subject: [PATCH] Optimize default configs

[Reference]
https://github.com/YouHaveTrouble/minecraft-optimization
https://github.com/irochi-moe/Rubia

diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
index 82ae8c6e0509a54ebf9226a879db6648a6a4bbe5..587b5b20c8cc1a7049faed4bee82b885dee43b6e 100644
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
+++ b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
@@ -235,7 +235,7 @@ public class PufferfishConfig {
     public static int maxProjectileLoadsPerProjectile;
     private static void projectileLoading() {
         maxProjectileLoadsPerTick = getInt("projectile.max-loads-per-tick", 10, "Controls how many chunks are allowed", "to be sync loaded by projectiles in a tick.");
-        maxProjectileLoadsPerProjectile = getInt("projectile.max-loads-per-projectile", 10, "Controls how many chunks a projectile", "can load in its lifetime before it gets", "automatically removed.");
+        maxProjectileLoadsPerProjectile = getInt("projectile.max-loads-per-projectile", 8, "Controls how many chunks a projectile", "can load in its lifetime before it gets", "automatically removed."); // Prismarine - Optimize default configurations
 
         setComment("projectile", "Optimizes projectile settings");
     }
@@ -256,7 +256,7 @@ public class PufferfishConfig {
         maximumActivationPrio = getInt("dab.max-tick-freq", "activation-range.max-tick-freq", 20,
                 "This value defines how often in ticks, the furthest entity",
                 "will get their pathfinders and behaviors ticked. 20 = 1s");
-        activationDistanceMod = getInt("dab.activation-dist-mod", "activation-range.activation-dist-mod", 8,
+        activationDistanceMod = getInt("dab.activation-dist-mod", "activation-range.activation-dist-mod", 7, // Prismarine - Optimize default configurations
                 "This value defines how much distance modifies an entity's",
                 "tick frequency. freq = (distanceToPlayer^2) / (2^value)",
                 "If you want further away entities to tick less often, use 7.",
diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index a1bd848bbf924267e74e61dabdb840628712b1ad..bf54409629f58e145887dc18ae40827817ca9b98 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -80,16 +80,18 @@ public class WorldConfiguration extends ConfigurationPart {
         public AntiXray antiXray;
 
         public class AntiXray extends ConfigurationPart {
-            public boolean enabled = false;
-            public EngineMode engineMode = EngineMode.HIDE;
+            public boolean enabled = true; // Prismarine - Optimize default configurations
+            public EngineMode engineMode = EngineMode.OBFUSCATE; // Prismarine - Optimize default configurations
             public int maxBlockHeight = 64;
             public int updateRadius = 2;
             public boolean lavaObscures = false;
             public boolean usePermission = false;
-            public List<String> hiddenBlocks = List.of("copper_ore", "deepslate_copper_ore", "gold_ore", "deepslate_gold_ore", "iron_ore", "deepslate_iron_ore",
-                "coal_ore", "deepslate_coal_ore", "lapis_ore", "deepslate_lapis_ore", "mossy_cobblestone", "obsidian", "chest", "diamond_ore", "deepslate_diamond_ore",
-                "redstone_ore", "deepslate_redstone_ore", "clay", "emerald_ore", "deepslate_emerald_ore", "ender_chest"); // TODO update type to List<Block>
-            public List<String> replacementBlocks = List.of("stone", "oak_planks", "deepslate"); // TODO update type to List<Block>
+            // Prismarine start - Optimize default config
+            public List<String> hiddenBlocks = List.of("air", "copper_ore", "deepslate_copper_ore", "raw_copper_block", "diamond_ore", "deepslate_diamond_ore",
+                    "gold_ore", "deepslate_gold_ore", "iron_ore", "deepslate_iron_ore", "raw_iron_block", "lapis_ore", "deepslate_lapis_ore", "redstone_ore", "deepslate_redstone_ore"); // TODO update type to List<Block>
+            public List<String> replacementBlocks = List.of("chest", "amethyst_block", "andesite", "budding_amethyst", "calcite", "coal_ore", "deepslate_coal_ore", "deepslate",
+                    "diorite", "dirt", "emerald_ore", "deepslate_emerald_ore", "granite", "gravel", "oak_planks", "smooth_basalt", "stone", "tuff"); // TODO update type to List<Block>
+            // Prismarine end
         }
     }
 
@@ -129,7 +131,7 @@ public class WorldConfiguration extends ConfigurationPart {
             @MergeMap
             public Reference2IntMap<MobCategory> spawnLimits = Util.make(new Reference2IntOpenHashMap<>(NaturalSpawner.SPAWNING_CATEGORIES.length), map -> Arrays.stream(NaturalSpawner.SPAWNING_CATEGORIES).forEach(mobCategory -> map.put(mobCategory, -1)));
             @MergeMap
-            public Map<MobCategory, DespawnRange> despawnRanges = Arrays.stream(MobCategory.values()).collect(Collectors.toMap(Function.identity(), category -> new DespawnRange(category.getNoDespawnDistance(), category.getDespawnDistance())));
+            public Map<MobCategory, DespawnRange> despawnRanges = Arrays.stream(MobCategory.values()).collect(Collectors.toMap(Function.identity(), category -> new DespawnRange(30, 56))); // Prismarine - Optimize default configurations
 
             @ConfigSerializable
             public record DespawnRange(@Required int soft, @Required int hard) {
@@ -189,8 +191,37 @@ public class WorldConfiguration extends ConfigurationPart {
             public AltItemDespawnRate altItemDespawnRate;
 
             public class AltItemDespawnRate extends ConfigurationPart {
-                public boolean enabled = false;
-                public Reference2IntMap<Item> items = new Reference2IntOpenHashMap<>(Map.of(Items.COBBLESTONE, 300));
+                // Prismarine start - Optimize default configurations
+                public boolean enabled = true;
+                public Reference2IntMap<Item> items = new Reference2IntOpenHashMap<>(Map.ofEntries(
+                        Map.entry(Items.COBBLESTONE, 300),
+                        Map.entry(Items.NETHERRACK, 300),
+                        Map.entry(Items.SAND, 300),
+                        Map.entry(Items.RED_SAND, 300),
+                        Map.entry(Items.GRAVEL, 300),
+                        Map.entry(Items.DIRT, 300),
+                        Map.entry(Items.GRASS, 300),
+                        Map.entry(Items.PUMPKIN, 300),
+                        Map.entry(Items.MELON_SLICE, 300),
+                        Map.entry(Items.KELP, 300),
+                        Map.entry(Items.BAMBOO, 300),
+                        Map.entry(Items.SUGAR_CANE, 300),
+                        Map.entry(Items.TWISTING_VINES, 300),
+                        Map.entry(Items.WEEPING_VINES, 300),
+                        Map.entry(Items.OAK_LEAVES, 300),
+                        Map.entry(Items.SPRUCE_LEAVES, 300),
+                        Map.entry(Items.BIRCH_LEAVES, 300),
+                        Map.entry(Items.JUNGLE_LEAVES, 300),
+                        Map.entry(Items.ACACIA_LEAVES, 300),
+                        Map.entry(Items.DARK_OAK_LEAVES, 300),
+                        Map.entry(Items.MANGROVE_LEAVES, 300),
+                        Map.entry(Items.CACTUS, 300),
+                        Map.entry(Items.DIORITE, 300),
+                        Map.entry(Items.GRANITE, 300),
+                        Map.entry(Items.ANDESITE, 300),
+                        Map.entry(Items.SCAFFOLDING, 300)
+                ));
+                // Prismarine end
             }
         }
 
@@ -309,7 +340,7 @@ public class WorldConfiguration extends ConfigurationPart {
     public class Environment extends ConfigurationPart {
         public boolean disableThunder = false;
         public boolean disableIceAndSnow = false;
-        public boolean optimizeExplosions = false;
+        public boolean optimizeExplosions = true; // Prismarine - Optimize default configurations
         public boolean disableExplosionKnockback = false;
         public boolean generateFlatBedrock = false;
         public FrostedIce frostedIce;
@@ -381,7 +412,7 @@ public class WorldConfiguration extends ConfigurationPart {
     public class Hopper extends ConfigurationPart {
         public boolean cooldownWhenFull = true;
         public boolean disableMoveEvent = false;
-        public boolean ignoreOccludingBlocks = false;
+        public boolean ignoreOccludingBlocks = true; // Prismarine - Optimize default configurations
     }
 
     public Collisions collisions;
@@ -389,9 +420,9 @@ public class WorldConfiguration extends ConfigurationPart {
     public class Collisions extends ConfigurationPart {
         public boolean onlyPlayersCollide = false;
         public boolean allowVehicleCollisions = true;
-        public boolean fixClimbingBypassingCrammingRule = false;
+        public boolean fixClimbingBypassingCrammingRule = true; // Prismarine - Optimize default configurations
         @RequiresSpigotInitialization(MaxEntityCollisionsInitializer.class)
-        public int maxEntityCollisions = 8;
+        public int maxEntityCollisions = 2; // Prismarine - Optimize default configurations
         public boolean allowPlayerCrammingDamage = false;
     }
 
@@ -399,18 +430,31 @@ public class WorldConfiguration extends ConfigurationPart {
 
     public class Chunks extends ConfigurationPart {
         public AutosavePeriod autoSaveInterval = AutosavePeriod.def();
-        public int maxAutoSaveChunksPerTick = 24;
+        public int maxAutoSaveChunksPerTick = 8; // Prismarine - Optimize default configurations
         public int fixedChunkInhabitedTime = -1;
-        public boolean preventMovingIntoUnloadedChunks = false;
+        public boolean preventMovingIntoUnloadedChunks = true; // Prismarine - Optimize default configurations
         public Duration delayChunkUnloadsBy = Duration.of("10s");
         public Reference2IntMap<EntityType<?>> entityPerChunkSaveLimit = Util.make(new Reference2IntOpenHashMap<>(Registry.ENTITY_TYPE.size()), map -> {
             map.defaultReturnValue(-1);
-            map.put(EntityType.EXPERIENCE_ORB, -1);
-            map.put(EntityType.SNOWBALL, -1);
-            map.put(EntityType.ENDER_PEARL, -1);
-            map.put(EntityType.ARROW, -1);
-            map.put(EntityType.FIREBALL, -1);
-            map.put(EntityType.SMALL_FIREBALL, -1);
+            // Prismarine start - Optimize defalut configurations
+            map.put(EntityType.AREA_EFFECT_CLOUD, 8);
+            map.put(EntityType.ARROW, 16);
+            map.put(EntityType.DRAGON_FIREBALL, 3);
+            map.put(EntityType.EGG, 8);
+            map.put(EntityType.ENDER_PEARL, 8);
+            map.put(EntityType.EXPERIENCE_ORB, 16);
+            map.put(EntityType.EYE_OF_ENDER, 8);
+            map.put(EntityType.FIREBALL, 8);
+            map.put(EntityType.FIREWORK_ROCKET, 8);
+            map.put(EntityType.LLAMA_SPIT, 3);
+            map.put(EntityType.POTION, 8);
+            map.put(EntityType.SHULKER_BULLET, 8);
+            map.put(EntityType.SMALL_FIREBALL, 8);
+            map.put(EntityType.SNOWBALL, 8);
+            map.put(EntityType.SPECTRAL_ARROW, 16);
+            map.put(EntityType.TRIDENT, 16);
+            map.put(EntityType.WITHER_SKULL, 4);
+            // Prismarine end
         });
     }
 
@@ -424,11 +468,22 @@ public class WorldConfiguration extends ConfigurationPart {
     public TickRates tickRates;
 
     public class TickRates extends ConfigurationPart {
-        public int grassSpread = 1;
+        public int grassSpread = 4; // Prismarine - Optimize default configurations
         public int containerUpdate = 1;
-        public int mobSpawner = 1;
-        public Table<EntityType<?>, String, Integer> sensor = Util.make(HashBasedTable.create(), table -> table.put(EntityType.VILLAGER, "secondarypoisensor", 40));
-        public Table<EntityType<?>, String, Integer> behavior = Util.make(HashBasedTable.create(), table -> table.put(EntityType.VILLAGER, "validatenearbypoi", -1));
+        public int mobSpawner = 2; // Prismarine - Optimize default configurations
+        // Prismarine start - Optimize default configurations
+        public Table<EntityType<?>, String, Integer> sensor = Util.make(HashBasedTable.create(), table -> {
+            table.put(EntityType.VILLAGER, "secondarypoisensor", 80);
+            table.put(EntityType.VILLAGER, "nearestbedsensor", 80);
+            table.put(EntityType.VILLAGER, "villagerbabiessensor", 40);
+            table.put(EntityType.VILLAGER, "playersensor", 40);
+            table.put(EntityType.VILLAGER, "nearestlivingentitysensor", 40);
+        });
+        public Table<EntityType<?>, String, Integer> behavior = Util.make(HashBasedTable.create(), table -> {
+            table.put(EntityType.VILLAGER, "validatenearbypoi", 60);
+            table.put(EntityType.VILLAGER, "acquirepoi", 120);
+        });
+        // Prismarine end
     }
 
     @Setting(FeatureSeedsGeneration.FEATURE_SEEDS_KEY)
@@ -450,9 +505,9 @@ public class WorldConfiguration extends ConfigurationPart {
 
     public class Misc extends ConfigurationPart {
         public int lightQueueSize = 20;
-        public boolean updatePathfindingOnBlockUpdate = true;
+        public boolean updatePathfindingOnBlockUpdate = false; // Prismarine - Optimize default configurations
         public boolean showSignClickCommandFailureMsgsToPlayer = false;
-        public RedstoneImplementation redstoneImplementation = RedstoneImplementation.VANILLA;
+        public RedstoneImplementation redstoneImplementation = RedstoneImplementation.ALTERNATE_CURRENT; // Prismarine - Optimize default configurations
         public boolean disableEndCredits = false;
         public float maxLeashDistance = 10f;
         public boolean disableSprintInterruptionOnAttack = false;
diff --git a/src/main/java/io/papermc/paper/configuration/transformation/world/LegacyPaperWorldConfig.java b/src/main/java/io/papermc/paper/configuration/transformation/world/LegacyPaperWorldConfig.java
index 6af307481a6752529d87869760945cb140d05bed..70f32930030fdafb0b49c7104468f2f9c92707db 100644
--- a/src/main/java/io/papermc/paper/configuration/transformation/world/LegacyPaperWorldConfig.java
+++ b/src/main/java/io/papermc/paper/configuration/transformation/world/LegacyPaperWorldConfig.java
@@ -88,14 +88,14 @@ public final class LegacyPaperWorldConfig {
                     .build(),
                 ConfigurationTransformation.builder().addAction(path("despawn-ranges"), (path, value) -> {
                     final int softDistance = value.node("soft").getInt(32);
-                    final int hardDistance = value.node("hard").getInt(128);
+                    final int hardDistance = value.node("hard").getInt(56); // Prismarine - Optimize default configurations
                     value.node("soft").raw(null);
                     value.node("hard").raw(null);
                     for (final MobCategory category : MobCategory.values()) {
                         if (softDistance != 32) {
                             value.node(category.getName(), "soft").raw(softDistance);
                         }
-                        if (hardDistance != 128) {
+                        if (hardDistance != 56) { // Prismarine - Optimize default configurations
                             value.node(category.getName(), "hard").raw(hardDistance);
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index 88900f7a2077049cc5d78fe17314dbdf57d64a08..11466a8543c3b71dc4043a63173a539b2c063478 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -121,15 +121,15 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         this.allowNether = this.get("allow-nether", true);
         this.spawnMonsters = this.get("spawn-monsters", true);
         this.useNativeTransport = this.get("use-native-transport", true);
-        this.enableCommandBlock = this.get("enable-command-block", false);
-        this.spawnProtection = this.get("spawn-protection", 16);
+        this.enableCommandBlock = this.get("enable-command-block", true); // Prismarine - Optimize default configurations
+        this.spawnProtection = this.get("spawn-protection", 0); // Prismarine - Optimize default configurations
         this.opPermissionLevel = this.get("op-permission-level", 4);
         this.functionPermissionLevel = this.get("function-permission-level", 2);
         this.maxTickTime = this.get("max-tick-time", TimeUnit.MINUTES.toMillis(1L));
         this.maxChainedNeighborUpdates = this.get("max-chained-neighbor-updates", 1000000);
         this.rateLimitPacketsPerSecond = this.get("rate-limit", 0);
-        this.viewDistance = this.get("view-distance", 10);
-        this.simulationDistance = this.get("simulation-distance", 10);
+        this.viewDistance = this.get("view-distance", 7); // Prismarine - Optimize default configurations
+        this.simulationDistance = this.get("simulation-distance", 4); // Prismarine - Optimize default configurations
         this.maxPlayers = this.get("max-players", 20);
         this.networkCompressionThreshold = this.get("network-compression-threshold", 256);
         this.broadcastRconToOps = this.get("broadcast-rcon-to-ops", true);
@@ -148,7 +148,7 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         this.previewsChat = this.get("previews-chat", false);
         this.playerIdleTimeout = this.getMutable("player-idle-timeout", 0);
         this.whiteList = this.getMutable("white-list", false);
-        this.enforceSecureProfile = this.get("enforce-secure-profile", true);
+        this.enforceSecureProfile = this.get("enforce-secure-profile", false); // Prismarine - Optimize default configurations
         this.worldGenProperties = new DedicatedServerProperties.WorldGenProperties(this.get("level-seed", ""), (JsonObject) this.get("generator-settings", (s) -> {
             return GsonHelper.parse(!s.isEmpty() ? s : "{}");
         }, new JsonObject()), this.get("generate-structures", true), (String) this.get("level-type", (s) -> {
diff --git a/src/main/java/org/purpurmc/purpur/PurpurConfig.java b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
index 8dfd4f3a008c9f8b677cf60da5c9dc53be947ebb..4f3d30127eacf250ab9fe5970f33c1834b5d3447 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
@@ -258,7 +258,7 @@ public class PurpurConfig {
         laggingThreshold = getDouble("settings.lagging-threshold", laggingThreshold);
     }
 
-    public static boolean useAlternateKeepAlive = false;
+    public static boolean useAlternateKeepAlive = true; // Prismarine - Optimize default configurations
     private static void useAlternateKeepAlive() {
         useAlternateKeepAlive = getBoolean("settings.use-alternate-keepalive", useAlternateKeepAlive);
     }
diff --git a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
index 21687d0bafc361f2e638376fa867a9eecbdf1f40..5981b3c5e467647d5d03d016fe9ac3cf44261ebe 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
@@ -417,8 +417,8 @@ public class PurpurWorldConfig {
     public boolean playerInvulnerableWhileAcceptingResourcePack = false;
     public String playerDeathExpDropEquation = "expLevel * 7";
     public int playerDeathExpDropMax = 100;
-    public boolean teleportIfOutsideBorder = false;
-    public boolean teleportOnNetherCeilingDamage = false;
+    public boolean teleportIfOutsideBorder = true; // Prismarine - Optimize default configurations
+    public boolean teleportOnNetherCeilingDamage = true; // Prismarine - Optimize default configurations
     public boolean totemOfUndyingWorksInInventory = false;
     public boolean playerFixStuckPortal = false;
     public boolean creativeOnePunch = false;
@@ -2734,7 +2734,7 @@ public class PurpurWorldConfig {
     public boolean villagerRidableInWater = false;
     public boolean villagerControllable = true;
     public double villagerMaxHealth = 20.0D;
-    public int villagerBrainTicks = 1;
+    public int villagerBrainTicks = 2; // Optimize default configurations
     public boolean villagerUseBrainTicksOnlyWhenLagging = true;
     public boolean villagerFollowEmeraldBlock = false;
     public boolean villagerCanBeLeashed = false;
@@ -2988,7 +2988,7 @@ public class PurpurWorldConfig {
     public boolean zombieJockeyOnlyBaby = true;
     public double zombieJockeyChance = 0.05D;
     public boolean zombieJockeyTryExistingChickens = true;
-    public boolean zombieAggressiveTowardsVillagerWhenLagging = true;
+    public boolean zombieAggressiveTowardsVillagerWhenLagging = false; // Prismarine - Optimize defalut configurations
     public boolean zombieBypassMobGriefing = false;
     public boolean zombieTakeDamageFromWater = false;
     public boolean zombieAlwaysDropExp = false;
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 5503ad6a93d331771a0e92c0da6adedf2ac81aff..6d7c9d2296381001bf4de3cb840f259802959591 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -146,14 +146,14 @@ public class SpigotWorldConfig
     public double itemMerge;
     private void itemMerge()
     {
-        this.itemMerge = this.getDouble("merge-radius.item", 2.5 );
+        this.itemMerge = this.getDouble("merge-radius.item", 3.5 ); // Prismarine - Optimize default configurations
         this.log( "Item Merge Radius: " + this.itemMerge );
     }
 
     public double expMerge;
     private void expMerge()
     {
-        this.expMerge = this.getDouble("merge-radius.exp", 3.0 );
+        this.expMerge = this.getDouble("merge-radius.exp", 4.0 ); // Prismarine - Optimize default configurations
         this.log( "Experience Merge Radius: " + this.expMerge );
     }
 
@@ -192,7 +192,7 @@ public class SpigotWorldConfig
     public byte mobSpawnRange;
     private void mobSpawnRange()
     {
-        this.mobSpawnRange = (byte) getInt( "mob-spawn-range", 8 ); // Paper - Vanilla
+        this.mobSpawnRange = (byte) getInt( "mob-spawn-range", 2 ); // Paper - Vanilla // Prismarine - Optimize default configurations
         this.log( "Mob Spawn Range: " + this.mobSpawnRange );
     }
 
@@ -203,14 +203,14 @@ public class SpigotWorldConfig
         this.log( "Item Despawn Rate: " + this.itemDespawnRate );
     }
 
-    public int animalActivationRange = 32;
-    public int monsterActivationRange = 32;
+    public int animalActivationRange = 16; // Prismarine - Optimize default configurations
+    public int monsterActivationRange = 24; // Prismarine - Optimize default configurations
     public int raiderActivationRange = 48;
-    public int miscActivationRange = 16;
+    public int miscActivationRange = 8; // Prismarine - Optimize default configurations
     // Paper start
-    public int flyingMonsterActivationRange = 32;
-    public int waterActivationRange = 16;
-    public int villagerActivationRange = 32;
+    public int flyingMonsterActivationRange = 48; // Prismarine - Optimize default configurations
+    public int waterActivationRange = 8; // Prismarine - Optimize default configurations
+    public int villagerActivationRange = 16; // Prismarine - Optimize default configurations
     public int wakeUpInactiveAnimals = 4;
     public int wakeUpInactiveAnimalsEvery = 60*20;
     public int wakeUpInactiveAnimalsFor = 5*20;
@@ -227,7 +227,7 @@ public class SpigotWorldConfig
     public int villagersWorkImmunityFor = 20;
     public boolean villagersActiveForPanic = true;
     // Paper end
-    public boolean tickInactiveVillagers = true;
+    public boolean tickInactiveVillagers = false; // Prismarine - Optimize default configurations
     public boolean ignoreSpectatorActivation = false;
     private void activationRange()
     {
@@ -291,9 +291,9 @@ public class SpigotWorldConfig
         this.hopperTransfer = this.getInt( "ticks-per.hopper-transfer", 8 );
         if ( SpigotConfig.version < 11 )
         {
-            this.set( "ticks-per.hopper-check", 1 );
+            this.set( "ticks-per.hopper-check", 8 ); // Prismarine - Optimize default configurations
         }
-        this.hopperCheck = this.getInt( "ticks-per.hopper-check", 1 );
+        this.hopperCheck = this.getInt( "ticks-per.hopper-check", 8 ); // Prismarine - Optimize default configurations
         this.hopperAmount = this.getInt( "hopper-amount", 1 );
         this.hopperCanLoadChunks = this.getBoolean( "hopper-can-load-chunks", false );
         this.log( "Hopper Transfer: " + this.hopperTransfer + " Hopper Check: " + this.hopperCheck + " Hopper Amount: " + this.hopperAmount + " Hopper Can Load Chunks: " + this.hopperCanLoadChunks );
@@ -303,7 +303,7 @@ public class SpigotWorldConfig
     public int tridentDespawnRate;
     private void arrowDespawnRate()
     {
-        this.arrowDespawnRate = this.getInt( "arrow-despawn-rate", 1200 );
+        this.arrowDespawnRate = this.getInt( "arrow-despawn-rate", 300 ); // Prismarine - Optimize default configurations
         this.tridentDespawnRate = this.getInt( "trident-despawn-rate", this.arrowDespawnRate );
         this.log( "Arrow Despawn Rate: " + this.arrowDespawnRate + " Trident Respawn Rate:" + this.tridentDespawnRate );
     }
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
index eef7c125b2689f29cae5464659eacdf33f5695b2..f5515789f596bac7dd7361118387464cf8776653 100644
--- a/src/main/resources/configurations/bukkit.yml
+++ b/src/main/resources/configurations/bukkit.yml
@@ -24,22 +24,22 @@ settings:
     minimum-api: none
     use-map-color-cache: true
 spawn-limits:
-    monsters: 70
-    animals: 10
-    water-animals: 5
-    water-ambient: 20
-    water-underground-creature: 5
-    axolotls: 5
-    ambient: 15
+    monsters: 20
+    animals: 5
+    water-animals: 2
+    water-ambient: 2
+    water-underground-creature: 3
+    axolotls: 3
+    ambient: 1
 chunk-gc:
     period-in-ticks: 600
 ticks-per:
+    monster-spawns: 10
     animal-spawns: 400
-    monster-spawns: 1
-    water-spawns: 1
-    water-ambient-spawns: 1
-    water-underground-creature-spawns: 1
-    axolotl-spawns: 1
-    ambient-spawns: 1
+    water-spawns: 400
+    water-ambient-spawns: 400
+    water-underground-creature-spawns: 400
+    axolotl-spawns: 400
+    ambient-spawns: 400
     autosave: 6000
 aliases: now-in-commands.yml
diff --git a/src/main/resources/configurations/commands.yml b/src/main/resources/configurations/commands.yml
index 18f54571200e2eca09a39b88f170fe7b99d8618f..1b57d51d92c5c69286800d10baeaa936fa208cae 100644
--- a/src/main/resources/configurations/commands.yml
+++ b/src/main/resources/configurations/commands.yml
@@ -12,5 +12,3 @@
 command-block-overrides: []
 ignore-vanilla-permissions: false
 aliases:
-    icanhasbukkit:
-      - "version $1-"
