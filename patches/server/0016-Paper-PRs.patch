From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sun, 15 May 2022 20:47:19 +0900
Subject: [PATCH] Paper PRs

Copyright (C) 2022 PaperMC Team

[GNU GPL v3]
This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program.  If not, see <http://www.gnu.org/licenses/>.

[MIT (for Jake Potrebic (Machine_Maker))]
Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
Software), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

[ADDED PULL REQUESTS]
Jake Potrebic <jake.m.potrebic@gmail.com> - Use DataConverter for itemstack/entity deserialization PaperMC/Paper#7068
Jake Potrebic <jake.m.potrebic@gmail.com> - Use team display name for quit message PaperMC/Paper#7127
dannyball710 <dannyball710@gmail.com> - Ignore BaseSpawner impossible spawn tick PaperMC/Paper#7469
Jake Potrebic <jake.m.potrebic@gmail.com> - Fix async entity add due to fungus trees PaperMC/Paper#7626
booky10 <boooky10@gmail.com> - Prevent healing by negative amounts PaperMC/Paper#7703 // Edited by AlphaKR93 <alphakr93@outlook.com>
Peter-Crawley <?> - List world on tile entity placement exception PaperMC/Paper#7709

[JETTPACK RELATED]
0017
0018
0019

diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 580c0d76bdedd83be29500d64816a129e270fbc3..245ffd8d8db27b598f1c6f491ff451c6734f1ed0 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -82,6 +82,17 @@ public class FriendlyByteBuf extends ByteBuf {
     private static final int PUBLIC_KEY_SIZE = 256;
     private static final int MAX_PUBLIC_KEY_HEADER_SIZE = 256;
     private static final int MAX_PUBLIC_KEY_LENGTH = 512;
+    // Prismarine start - Paper PR
+    // Paper start - Optimize VarInts
+    private static final int[] VARINT_EXACT_BYTE_LENGTHS = new int[33];
+    static {
+        for (int i = 0; i <= 32; ++i) {
+            VARINT_EXACT_BYTE_LENGTHS[i] = (int) Math.ceil((31d - (i - 1)) / 7d);
+        }
+        VARINT_EXACT_BYTE_LENGTHS[32] = 1; // Special case for the number 0.
+    }
+    // Paper end
+    // Prismarine end
 
     public static boolean hasItemSerializeEvent = false; // Purpur
 
@@ -90,13 +101,7 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public static int getVarIntSize(int value) {
-        for (int j = 1; j < 5; ++j) {
-            if ((value & -1 << j * 7) == 0) {
-                return j;
-            }
-        }
-
-        return 5;
+        return VARINT_EXACT_BYTE_LENGTHS[Integer.numberOfLeadingZeros(value)]; // Paper - Optimize VarInts
     }
 
     public static int getVarLongSize(long value) {
@@ -506,6 +511,23 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeVarInt(int value) {
+        // Prismarine start - Paper PR
+        // Paper start - Optimize VarInts
+        // Peel the one and two byte count cases explicitly as they are the most common VarInt sizes
+        // that the proxy will write, to improve inlining.
+        if ((value & (0xFFFFFFFF << 7)) == 0) {
+            writeByte(value);
+        } else if ((value & (0xFFFFFFFF << 14)) == 0) {
+            writeShort((value & 0x7F | 0x80) << 8 | (value >>> 7));
+        } else {
+            writeVarInt_(value);
+        }
+        return this;
+    }
+
+    public FriendlyByteBuf writeVarInt_(int value) {
+        // Paper end
+        // Prismarine end
         while ((value & -128) != 0) {
             this.writeByte(value & 127 | 128);
             value >>>= 7;
diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index c677a55db62b4d197eeb1bf5d929e24019fed5ec..4e6b1cb89a02fd24077854fd89902f2007bf4d66 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -227,6 +227,7 @@ public class WorldGenRegion implements WorldGenLevel {
         if (iblockdata.isAir()) {
             return false;
         } else {
+            if (drop) LOGGER.warn("Potential async entity add during worldgen", new Throwable()); // Paper - log when this happens // Prismarine - Paper PR
             if (false) { // CraftBukkit - SPIGOT-6833: Do not drop during world generation
                 BlockEntity tileentity = iblockdata.hasBlockEntity() ? this.getBlockEntity(pos) : null;
 
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 89310e0759d4a3d215112f83630ed193596fd2ce..22edd0116f55abc50dfdd45831c0f621ad49ef10 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -616,7 +616,7 @@ public abstract class PlayerList {
 
     public net.kyori.adventure.text.Component remove(ServerPlayer entityplayer) { // Paper - return Component
         // Paper start
-        return this.remove(entityplayer, net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? entityplayer.getBukkitEntity().displayName() : net.kyori.adventure.text.Component.text(entityplayer.getScoreboardName())));
+        return this.remove(entityplayer, net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? entityplayer.getBukkitEntity().displayName() : PaperAdventure.asAdventure(entityplayer.getDisplayName()))); // Prismairne - Paper PR
     }
     public net.kyori.adventure.text.Component remove(ServerPlayer entityplayer, net.kyori.adventure.text.Component leaveMessage) {
         // Paper end
diff --git a/src/main/java/net/minecraft/world/effect/MobEffect.java b/src/main/java/net/minecraft/world/effect/MobEffect.java
index bb15cf2aa35ce8754bba56f5b312d92b1a50c9f8..82c1e4f79210e10031a7555be03e294d53e06fa0 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffect.java
@@ -111,7 +111,13 @@ public class MobEffect {
                 }
             }
         } else {
-            j = (int) (proximity * (double) (4 << amplifier) + 0.5D);
+            // Prismarine start - Paper PR
+            if (net.prismarineteam.prismarine.PrismarineConfig.preventHealingByNegative) {
+                j = Math.max((int) (proximity * (double) (4 << amplifier) + 0.5D), 0); // Paper - Prevent healing by negative amounts
+            } else {
+                j = (int) (proximity * (double) (4 << amplifier) + 0.5D);
+            }
+            // Prismarine end
             target.heal((float) j, RegainReason.MAGIC); // CraftBukkit
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/EntitySelector.java b/src/main/java/net/minecraft/world/entity/EntitySelector.java
index 5a3e29aedc537c672d11385cec562b2c30761730..2b039882c6857abce9394cafb7827865a75ff354 100644
--- a/src/main/java/net/minecraft/world/entity/EntitySelector.java
+++ b/src/main/java/net/minecraft/world/entity/EntitySelector.java
@@ -27,7 +27,20 @@ public final class EntitySelector {
         return !entity.isSpectator();
     };
     public static final Predicate<Entity> CAN_BE_COLLIDED_WITH = EntitySelector.NO_SPECTATORS.and(Entity::canBeCollidedWith);
-    public static Predicate<Player> isInsomniac = (player) -> net.minecraft.util.Mth.clamp(((net.minecraft.server.level.ServerPlayer) player).getStats().getValue(net.minecraft.stats.Stats.CUSTOM.get(net.minecraft.stats.Stats.TIME_SINCE_REST)), 1, Integer.MAX_VALUE) >= 72000; // Paper
+    // Prismarine start - Paper PR
+    // Paper start
+    public static Predicate<Player> isInsomniac = (player) -> {
+        net.minecraft.server.level.ServerPlayer serverPlayer = (net.minecraft.server.level.ServerPlayer) player;
+        int playerInsomniaTicks = serverPlayer.getLevel().purpurConfig.phantomSpawnMinTimeSinceSlept; // Prismarine
+
+        if (playerInsomniaTicks <= 0) {
+            return false;
+        }
+
+        return net.minecraft.util.Mth.clamp(serverPlayer.getStats().getValue(net.minecraft.stats.Stats.CUSTOM.get(net.minecraft.stats.Stats.TIME_SINCE_REST)), 1, Integer.MAX_VALUE) >= playerInsomniaTicks;
+    };
+    // Paper end
+    // Prismarine end
     public static Predicate<Player> notAfk = (player) -> !player.isAfk(); // Purpur
 
     private EntitySelector() {}
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index 4e00c2216142b52fb34be0e51d00fa20fded92c8..4f31454c192361a18d32d3085cb9df90effadba9 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -128,8 +128,13 @@ public class EnderMan extends Monster implements NeutralMob {
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.targetSelector.addGoal(1, new EnderMan.EndermanLookForPlayerGoal(this, this::isAngryAt));
         this.targetSelector.addGoal(2, new HurtByTargetGoal(this, new Class[0]));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Endermite.class, 10, true, false, (entityliving) -> entityliving.level.purpurConfig.endermanAggroEndermites && entityliving instanceof Endermite endermite && (!entityliving.level.purpurConfig.endermanAggroEndermitesOnlyIfPlayerSpawned || endermite.isPlayerSpawned()))); // Purpur
-        this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal<>(this, false));
+        // Prismarine start - Paper PR
+        // Paper start - fix enderman universal anger
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt));
+        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Endermite.class, 10, true, false, (entityliving) -> entityliving.level.purpurConfig.endermanAggroEndermites && entityliving instanceof Endermite endermite && (!entityliving.level.purpurConfig.endermanAggroEndermitesOnlyIfPlayerSpawned || endermite.isPlayerSpawned()))); // Purpur
+        this.targetSelector.addGoal(5, new ResetUniversalAngerTargetGoal<>(this, false));
+        // Paper end
+        // Prismarine end
     }
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
index 617a5619693877cf6ae158db8dda0caefa148633..6fb72bfc1498f8cdd65ebd7aead84e690d4d1e33 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
@@ -232,4 +232,13 @@ public class PrismarineConfig {
     private static void useAirplaneCollisionContext() {
         useNormalCollisionContext = getBoolean("settings.use-normal-collision-context", useNormalCollisionContext);
     }
+
+    public static boolean preventHealingByNegative = true;
+    private static void preventHealingByNegative() {
+        preventHealingByNegative = getBoolean("settings.prevent-healing-by-negative-amounts", preventHealingByNegative);
+        if (version < 3) {
+            set("settings.prevent-healing-by-negative-amounts", getBoolean("settings.pull-requests.paper.prevent-healing-by-negative-amounts", true));
+            set("settings.pull-requests.paper.prevent-healing-by-negative-amounts", null);
+        }
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
index 62bca85da6c5d9877e21fecb702370506ddf671c..275f4b7378b1c9d297f2d0af5c7571b142a21db6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
@@ -372,10 +372,10 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
                 ((ChorusFlowerBlock) Blocks.CHORUS_FLOWER).generatePlant(access, pos, random, 8);
                 return true;
             case CRIMSON_FUNGUS:
-                gen = TreeFeatures.CRIMSON_FUNGUS_PLANTED;
+                gen = this.isNormalWorld() ? TreeFeatures.CRIMSON_FUNGUS_PLANTED : TreeFeatures.CRIMSON_FUNGUS; // Paper - if world gen, don't use planted version // Prismarine - Paper PR
                 break;
             case WARPED_FUNGUS:
-                gen = TreeFeatures.WARPED_FUNGUS_PLANTED;
+                gen = this.isNormalWorld() ? TreeFeatures.WARPED_FUNGUS_PLANTED : TreeFeatures.WARPED_FUNGUS; // Paper - if world gen, don't use planted version // Prismarine - Paper PR
                 break;
             case AZALEA:
                 gen = TreeFeatures.AZALEA_TREE;
diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
index 355c9f79fd3132848a00eacde951d1e1bfa92737..30e0d02eee10cfbf4558a0d61a0cb407e3678c7e 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
@@ -92,7 +92,7 @@ public final class CraftPersistentDataTypeRegistry {
         }
     }
 
-    private final Map<Class, TagAdapter> adapters = new HashMap<>();
+    private final Map<Class, TagAdapter> adapters = new java.util.concurrent.ConcurrentHashMap<>(); // Paper - Replace HashMap with ConcurrentHashMap to avoid CME // Prismarine - Paper PR
 
     /**
      * Creates a suitable adapter instance for the primitive class type
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 0b248a987d22da21aa802c5dba00b4f987c365ea..58eaeae2751261057bdb0081e50db26b99fd8c17 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -453,8 +453,8 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
         CompoundTag compound = deserializeNbtFromBytes(data);
         int dataVersion = compound.getInt("DataVersion");
-        Dynamic<Tag> converted = DataFixers.getDataFixer().update(References.ITEM_STACK, new Dynamic<Tag>(NbtOps.INSTANCE, compound), dataVersion, getDataVersion());
-        return CraftItemStack.asCraftMirror(net.minecraft.world.item.ItemStack.of((CompoundTag) converted.getValue()));
+        compound = ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.ITEM_STACK, compound, dataVersion, getDataVersion()); // Paper - rewrite dataconverter // Prismarine - Paper PR
+        return CraftItemStack.asCraftMirror(net.minecraft.world.item.ItemStack.of(compound)); // Prismarine - Paper PR
     }
 
     @Override
@@ -474,8 +474,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
         CompoundTag compound = deserializeNbtFromBytes(data);
         int dataVersion = compound.getInt("DataVersion");
-        Dynamic<Tag> converted = DataFixers.getDataFixer().update(References.ENTITY_TREE, new Dynamic<>(NbtOps.INSTANCE, compound), dataVersion, getDataVersion());
-        compound = (CompoundTag) converted.getValue();
+        compound = ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.ENTITY, compound, dataVersion, getDataVersion()); // Paper - rewrite dataconverter // Prismarine - Paper PR
         if (!preserveUUID) compound.remove("UUID"); // Generate a new UUID so we don't have to worry about deserializing the same entity twice
         return net.minecraft.world.entity.EntityType.create(compound, ((org.bukkit.craftbukkit.CraftWorld) world).getHandle())
             .orElseThrow(() -> new IllegalArgumentException("An ID was not found for the data. Did you downgrade?")).getBukkitEntity();
