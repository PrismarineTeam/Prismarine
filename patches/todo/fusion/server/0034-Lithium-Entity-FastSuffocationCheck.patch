From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Thu, 10 Nov 2022 22:26:29 +0900
Subject: [PATCH] Lithium-Entity-FastSuffocationCheck

Mirai - etil2jz - GPL 3.0
Lithium - CaffeineMC  - GPL 3.0

diff --git a/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java b/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
index e25c7c4b991a21b26036234eb0422047cb24845f..47ae464e576ce3f71492eb25e1748848c48013ab 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionWorldConfig.java
@@ -140,6 +140,7 @@ public class FusionWorldConfig {
     public boolean lithiumBlockMovingBlockEntityShapes = true;
     public boolean lithiumChunkFastAccess = true;
     public boolean lithiumEntityAISecondaryPoiSensor = true;
+    public boolean lithiumEntityFastSuffocationCheck = true;
 
     private void lithiumConfig() {
         lithiumEnable = getBoolean("lithium.enable", lithiumEnable);
@@ -152,5 +153,6 @@ public class FusionWorldConfig {
         lithiumBlockMovingBlockEntityShapes = getBoolean("lithium.block.moving-block-entity-shapes", lithiumBlockMovingBlockEntityShapes) && lithiumEnable;
         lithiumChunkFastAccess = getBoolean("lithium.chunk.fast-access", lithiumChunkFastAccess) && lithiumEnable;
         lithiumEntityAISecondaryPoiSensor = getBoolean("lithium.entity.ai-secondary-poi-sensor", lithiumEntityAISecondaryPoiSensor) && lithiumEnable;
+        lithiumEntityFastSuffocationCheck = getBoolean("lithium.entity.fast-suffocation-check", lithiumEntityFastSuffocationCheck) && lithiumEnable;
     }

     private void lithiumConfigSetup() {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 385850b7a2802b4315a33aa2972a9a44127f8987..048509cc6fb824dad6c30c668b0c96eca3257d94 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -2589,39 +2589,94 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return !this.isRemoved();
     }
 
+    // Fusion start - Lithium: Entity Fast Suffocation Check
+    /**
+     * @author 2No2Name
+     * @reason Avoid stream code, use optimized chunk section iteration order
+     */
     public boolean isInWall() {
+        // [VanillaCopy] The whole method functionality including bug below. Cannot use ChunkAwareBlockCollisionSweeper due to ignoring of oversized blocks
         if (this.noPhysics) {
             return false;
         } else {
-            float f = this.dimensions.width * 0.8F;
-            AABB axisalignedbb = AABB.ofSize(this.getEyePosition(), (double) f, 1.0E-6D, (double) f);
-
-            BlockPos.MutableBlockPos blockposition = new BlockPos.MutableBlockPos();
-            int minX = Mth.floor(axisalignedbb.minX);
-            int minY = Mth.floor(axisalignedbb.minY);
-            int minZ = Mth.floor(axisalignedbb.minZ);
-            int maxX = Mth.floor(axisalignedbb.maxX);
-            int maxY = Mth.floor(axisalignedbb.maxY);
-            int maxZ = Mth.floor(axisalignedbb.maxZ);
-            for (int fz = minZ; fz <= maxZ; ++fz) {
-                for (int fx = minX; fx <= maxX; ++fx) {
-                    for (int fy = minY; fy <= maxY; ++fy) {
-                        net.minecraft.world.level.chunk.LevelChunk chunk = (net.minecraft.world.level.chunk.LevelChunk)this.level.getChunkIfLoadedImmediately(fx >> 4, fz >> 4);
-                        if (chunk == null) {
-                            continue;
+            if (!this.level.fusionConfig.lithiumEntityFastSuffocationCheck) {
+                float f = this.dimensions.width * 0.8F;
+                AABB axisalignedbb = AABB.ofSize(this.getEyePosition(), (double) f, 1.0E-6D, (double) f);
+
+                BlockPos.MutableBlockPos blockposition = new BlockPos.MutableBlockPos();
+                int minX = Mth.floor(axisalignedbb.minX);
+                int minY = Mth.floor(axisalignedbb.minY);
+                int minZ = Mth.floor(axisalignedbb.minZ);
+                int maxX = Mth.floor(axisalignedbb.maxX);
+                int maxY = Mth.floor(axisalignedbb.maxY);
+                int maxZ = Mth.floor(axisalignedbb.maxZ);
+                for (int fz = minZ; fz <= maxZ; ++fz) {
+                    for (int fx = minX; fx <= maxX; ++fx) {
+                        for (int fy = minY; fy <= maxY; ++fy) {
+                            net.minecraft.world.level.chunk.LevelChunk chunk = (net.minecraft.world.level.chunk.LevelChunk) this.level.getChunkIfLoadedImmediately(fx >> 4, fz >> 4);
+                            if (chunk == null) {
+                                continue;
+                            }
+
+                            BlockState iblockdata = chunk.getBlockStateFinal(fx, fy, fz);
+                            blockposition.set(fx, fy, fz);
+                            if (!iblockdata.isAir() && iblockdata.isSuffocating(this.level, blockposition) && Shapes.joinIsNotEmpty(iblockdata.getCollisionShape(this.level, blockposition).move((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ()), Shapes.create(axisalignedbb), BooleanOp.AND)) {
+                                return true;
+                            }
                         }
+                    }
+                }
+                return false;
+            } else {
+                Vec3 position = this.getEyePosition();
+                double suffocationRadius = Math.abs((double) (this.dimensions.width * 0.8f) / 2.0);
+
+                double suffocationMinX = position.x - suffocationRadius;
+                double suffocationMinY = position.y - 5.0E-7;
+                double suffocationMinZ = position.z - suffocationRadius;
+                double suffocationMaxX = position.x + suffocationRadius;
+                double suffocationMaxY = position.y + 5.0E-7;
+                double suffocationMaxZ = position.z + suffocationRadius;
+                int minX = Mth.floor(suffocationMinX);
+                int minY = Mth.floor(suffocationMinY);
+                int minZ = Mth.floor(suffocationMinZ);
+                int maxX = Mth.floor(suffocationMaxX);
+                int maxY = Mth.floor(suffocationMaxY);
+                int maxZ = Mth.floor(suffocationMaxZ);
+
+                Level level = this.level;
+                //skip getting blocks when the entity is outside the world height
+                //also avoids infinite loop with entities below y = Integer.MIN_VALUE (some modded servers do that)
+                if (level.getMinBuildHeight() > maxY || level.getMaxBuildHeight() < minY) {
+                    return false;
+                }
 
-                        BlockState iblockdata = chunk.getBlockStateFinal(fx, fy, fz);
-                        blockposition.set(fx, fy, fz);
-                        if (!iblockdata.isAir() && iblockdata.isSuffocating(this.level, blockposition) && Shapes.joinIsNotEmpty(iblockdata.getCollisionShape(this.level, blockposition).move((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ()), Shapes.create(axisalignedbb), BooleanOp.AND)) {
-                            return true;
+                BlockPos.MutableBlockPos blockposition = new BlockPos.MutableBlockPos();
+                VoxelShape suffocationShape = null;
+
+                for (int y = minY; y <= maxY; y++) {
+                    for (int z = minZ; z <= maxZ; z++) {
+                        for (int x = minX; x <= maxX; x++) {
+                            blockposition.set(x, y, z);
+                            BlockState iblockdata = level.getBlockState(blockposition);
+                            if (!iblockdata.isAir() && iblockdata.isSuffocating(this.level, blockposition)) {
+                                if (suffocationShape == null) {
+                                    suffocationShape = Shapes.create(new AABB(suffocationMinX, suffocationMinY, suffocationMinZ, suffocationMaxX, suffocationMaxY, suffocationMaxZ));
+                                }
+                                if (Shapes.joinIsNotEmpty(iblockdata.getCollisionShape(this.level, blockposition).
+                                                move(blockposition.getX(), blockposition.getY(), blockposition.getZ()),
+                                        suffocationShape, BooleanOp.AND)) {
+                                    return true;
+                                }
+                            }
                         }
                     }
                 }
+                return false;
             }
-            return false;
         }
     }
+    // Fusion end
 
     public InteractionResult interact(Player player, InteractionHand hand) {
         return InteractionResult.PASS;
