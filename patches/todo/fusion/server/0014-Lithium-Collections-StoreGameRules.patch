From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Tue, 25 Oct 2022 21:27:24 +0900
Subject: [PATCH] Lithium-Collections-StoreGameRules


diff --git a/src/main/java/com/github/ipecter/fusion/FusionConfig.java b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
index cfecf046b334bd59eaa994e38f644c93537686f3..10d6b5c9812ff5c5371d95da09daec275501f9c2 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
@@ -209,6 +209,7 @@ public class FusionConfig {
     public static boolean lithiumGeneralBetterMath = true;
     public static boolean lithiumEntityFastRetrieval = true;
     public static boolean lithiumCollectionsEntityAIGoals = true;
+    public static boolean lithiumCollectionsStoreGameRules = true;
 
     private static void lithiumConfig() {
         setComment("lithium", "[ Lithium ] General-Purpose Optimization Mod");
@@ -217,5 +218,6 @@ public class FusionConfig {
         lithiumGeneralBetterMath = getBoolean("lithium.general.better-math", lithiumGeneralBetterMath) && lithiumEnable;
         lithiumEntityFastRetrieval = getBoolean("lithium.entity.fast-retrieval", lithiumEntityFastRetrieval) && lithiumEnable;
         lithiumCollectionsEntityAIGoals = getBoolean("lithium.collections.entity-ai-goals", lithiumCollectionsEntityAIGoals) && lithiumEnable;
+        lithiumCollectionsStoreGameRules = getBoolean("lithium.collections.store-gamerules", lithiumCollectionsStoreGameRules) && lithiumEnable;
     }

     private static void lithiumConfigSetup() {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index 17e869074b8cf29a8c3280499a27e95179896750..d1d4dd6c661b0b487dc7101e04d70fe63546cd7e 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -111,14 +111,17 @@ public class GameRules {
 
     public GameRules() {
         // Pufferfish start - use this to ensure gameruleArray is initialized
-        this((Map) GameRules.GAME_RULE_TYPES.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry) -> {
-            return ((GameRules.Type) entry.getValue()).createRule();
-        })));
+        // Fusion start - Lithium: Collections Store GameRules
+        this(com.github.ipecter.fusion.FusionConfig.lithiumCollectionsStoreGameRules ?
+                        new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>((Map) GameRules.GAME_RULE_TYPES.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry) -> ((Type) entry.getValue()).createRule()))) :
+                        (Map) GameRules.GAME_RULE_TYPES.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry) -> ((Type) entry.getValue()).createRule()))
+        );
+        // Fusion end
         // Pufferfish end
     }
 
     private GameRules(Map<GameRules.Key<?>, GameRules.Value<?>> rules) {
-        this.rules = rules;
+        this.rules = com.github.ipecter.fusion.FusionConfig.lithiumCollectionsStoreGameRules ? new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(rules) : rules; // Fusion - Lithium: Collections Store GameRules
 
         // Pufferfish start
         int arraySize = rules.keySet().stream().mapToInt(key -> key.gameRuleIndex).max().orElse(-1) + 1;
