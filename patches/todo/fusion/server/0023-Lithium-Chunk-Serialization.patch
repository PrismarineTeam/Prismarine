From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Tue, 1 Nov 2022 19:50:50 +0900
Subject: [PATCH] Lithium-Chunk-Serialization

JettPack - Titaniumtown - GPL 3.0
Lithium - CaffeineMC  - GPL 3.0

diff --git a/src/main/java/com/github/ipecter/fusion/FusionConfig.java b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
index b1f52f6bdb0a93c0797d1296a029e7f12b2f8e49..99d5673cb07a1368ffd2ac22aba9a46968b21682 100644
--- a/src/main/java/com/github/ipecter/fusion/FusionConfig.java
+++ b/src/main/java/com/github/ipecter/fusion/FusionConfig.java
@@ -214,6 +214,7 @@ public class FusionConfig {
     public static boolean lithiumCollectionsEntityAttributes = true;
     public static boolean lithiumCollectionsEntityByType = true;
     public static boolean lithiumCollectionsEntityFiltering = true;
+    public static boolean lithiumWorldChunkSerialization = true;
 
     private static void lithiumConfig() {
         setComment("lithium", "[ Lithium ] General-Purpose Optimization Mod");
@@ -227,5 +228,6 @@ public class FusionConfig {
         lithiumCollectionsEntityAttributes = getBoolean("lithium.collections.entity-attributes", lithiumCollectionsEntityAttributes) && lithiumEnable;
         lithiumCollectionsEntityByType = getBoolean("lithium.collections.entity-by-type", lithiumCollectionsEntityByType) && lithiumEnable;
         lithiumCollectionsEntityFiltering = getBoolean("lithium.collections.entity-filtering", lithiumCollectionsEntityFiltering) && lithiumEnable;
+        lithiumWorldChunkSerialization = getBoolean("lithium.world.chunk-serialization", lithiumWorldChunkSerialization) && lithiumEnable;
     }

     private static void lithiumConfigSetup() {
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/util/BitStorage.java b/src/main/java/net/minecraft/util/BitStorage.java
index 106610ccc74b70b557b01c61262d56c4f1147acf..dad0f64933b98de4ed96da6ca6f4b26f4b1c851d 100644
--- a/src/main/java/net/minecraft/util/BitStorage.java
+++ b/src/main/java/net/minecraft/util/BitStorage.java
@@ -1,5 +1,6 @@
 package net.minecraft.util;
 
+import net.minecraft.world.level.chunk.Palette; // Fusion
 import java.util.function.IntConsumer;
 
 public interface BitStorage {
@@ -31,4 +32,6 @@ public interface BitStorage {
 
     }
     // Paper end
+
+    <T> void compact(Palette<T> srcPalette, Palette<T> dstPalette, short[] out); // Fusion - Lithium: World Chunk Serialization
 }
diff --git a/src/main/java/net/minecraft/util/SimpleBitStorage.java b/src/main/java/net/minecraft/util/SimpleBitStorage.java
index 36e33923bf48e56c743ed043bcbc66bc32f0422f..d63d8103dc9551a7706df5d382205fddff22a96e 100644
--- a/src/main/java/net/minecraft/util/SimpleBitStorage.java
+++ b/src/main/java/net/minecraft/util/SimpleBitStorage.java
@@ -2,6 +2,7 @@ package net.minecraft.util;
 
 import java.util.function.IntConsumer;
 import javax.annotation.Nullable;
+import net.minecraft.world.level.chunk.Palette; // Fusion
 import org.apache.commons.lang3.Validate;
 
 public class SimpleBitStorage implements BitStorage {
@@ -201,4 +202,44 @@ public class SimpleBitStorage implements BitStorage {
             super(message);
         }
     }
+
+    // Fusion start - Lithium: World Chunk Serialization
+    @Override
+    public <T> void compact(Palette<T> srcPalette, Palette<T> dstPalette, short[] out) {
+        if (this.size >= Short.MAX_VALUE) {
+            throw new IllegalStateException("Array too large");
+        }
+
+        if (this.size != out.length) {
+            throw new IllegalStateException("Array size mismatch");
+        }
+
+        short[] mappings = new short[(int) (this.mask + 1)];
+
+        int idx = 0;
+
+        for (long word : this.data) {
+            long bits = word;
+
+            for (int elementIdx = 0; elementIdx < this.valuesPerLong; ++elementIdx) {
+                int value = (int) (bits & this.mask);
+                int remappedId = mappings[value];
+
+                if (remappedId == 0) {
+                    remappedId = dstPalette.idFor(srcPalette.valueFor(value)) + 1;
+                    mappings[value] = (short) remappedId;
+                }
+
+                out[idx] = (short) (remappedId - 1);
+                bits >>= this.bits;
+
+                ++idx;
+
+                if (idx >= this.size) {
+                    return;
+                }
+            }
+        }
+    }
+    // Fusion end
 }
diff --git a/src/main/java/net/minecraft/util/ZeroBitStorage.java b/src/main/java/net/minecraft/util/ZeroBitStorage.java
index 5d8e9bdf5538b19681f21949368d862fab8a89ad..043869a05c50073a2c742e86c731151a38b9aad0 100644
--- a/src/main/java/net/minecraft/util/ZeroBitStorage.java
+++ b/src/main/java/net/minecraft/util/ZeroBitStorage.java
@@ -2,6 +2,8 @@ package net.minecraft.util;
 
 import java.util.Arrays;
 import java.util.function.IntConsumer;
+
+import net.minecraft.world.level.chunk.Palette; // Fusion
 import org.apache.commons.lang3.Validate;
 
 public class ZeroBitStorage implements BitStorage {
@@ -72,4 +74,6 @@ public class ZeroBitStorage implements BitStorage {
     public BitStorage copy() {
         return this;
     }
+
+    @Override public <T> void compact(Palette<T> srcPalette, Palette<T> dstPalette, short[] out) {} // Fusion - Lithium: World Chunk Serialization
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/PaletteResize.java b/src/main/java/net/minecraft/world/level/chunk/PaletteResize.java
index acae3eb30e0689048937f479dc3070f0688abdad..0c595fc1e26d9fa8c36c90bf8d72791c3f67838d 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PaletteResize.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PaletteResize.java
@@ -1,5 +1,5 @@
 package net.minecraft.world.level.chunk;
 
-interface PaletteResize<T> {
+public interface PaletteResize<T> { // Fusion - JettPack: Make Public
     int onResize(int newBits, T object);
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 7908360dd47937b2cb702e381802b7b278a5198e..7a4fbe89ed40d546776025e61db86f816e7f5c63 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -24,6 +24,20 @@ import net.minecraft.util.ThreadingDetector;
 import net.minecraft.util.ZeroBitStorage;
 
 public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainerRO<T> {
+    // Fusion start - Lithium: World Chunk Serialization
+    private static final ThreadLocal<short[]> CACHED_ARRAY_4096 = ThreadLocal.withInitial(() -> new short[4096]);
+    private static final ThreadLocal<short[]> CACHED_ARRAY_64 = ThreadLocal.withInitial(() -> new short[64]);
+    private Optional<LongStream> asOptional(long[] data) {
+        return Optional.of(Arrays.stream(data));
+    }
+    private short[] getOrCreate(int size) {
+        return switch (size) {
+            case 64 -> CACHED_ARRAY_64.get();
+            case 4096 -> CACHED_ARRAY_4096.get();
+            default -> new short[size];
+        };
+    }
+    //Fusion end
     private static final int MIN_PALETTE_BITS = 0;
     private final PaletteResize<T> dummyPaletteResize = (newSize, added) -> {
         return 0;
@@ -299,30 +313,80 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
     public synchronized PalettedContainerRO.PackedData<T> pack(IdMap<T> idList, PalettedContainer.Strategy paletteProvider) { // Paper - synchronize
         this.acquire();
 
-        PalettedContainerRO.PackedData var12;
-        try {
-            HashMapPalette<T> hashMapPalette = new HashMapPalette<>(idList, this.data.storage.getBits(), this.dummyPaletteResize);
-            int i = paletteProvider.size();
-            int[] is = new int[i];
-            this.data.storage.unpack(is);
-            swapPalette(is, (id) -> {
-                return hashMapPalette.idFor(this.data.palette.valueFor(id));
-            });
-            int j = paletteProvider.calculateBitsForSerialization(idList, hashMapPalette.getSize());
-            Optional<LongStream> optional;
-            if (j != 0) {
-                SimpleBitStorage simpleBitStorage = new SimpleBitStorage(j, i, is);
-                optional = Optional.of(Arrays.stream(simpleBitStorage.getRaw()));
-            } else {
-                optional = Optional.empty();
+        // Fusion start - Lithium: World Chunk Serialization
+        if (com.github.ipecter.fusion.FusionConfig.lithiumWorldChunkSerialization) {
+            Optional<LongStream> data = Optional.empty();
+            List<T> elements = null;
+            try {
+                // The palette that will be serialized
+                me.jellysquid.mods.lithium.common.world.chunk.LithiumHashPalette<T> hashPalette = null;
+
+                final Palette<T> palette = this.data.palette();
+                final BitStorage storage = this.data.storage();
+                if (storage instanceof ZeroBitStorage || palette.getSize() == 1) {
+                    // If the palette only contains one entry, don't attempt to repack it.
+                    elements = List.of(palette.valueFor(0));
+                } else if (palette instanceof me.jellysquid.mods.lithium.common.world.chunk.LithiumHashPalette<T> lithiumHashPalette) {
+                    hashPalette = lithiumHashPalette;
+                }
+
+                if (elements == null) {
+                    me.jellysquid.mods.lithium.common.world.chunk.LithiumHashPalette<T> compactedPalette = new me.jellysquid.mods.lithium.common.world.chunk.LithiumHashPalette<>(idList, storage.getBits(), this.dummyPaletteResize);
+                    short[] array = this.getOrCreate(paletteProvider.size());
+
+                    storage.compact(this.data.palette(), compactedPalette, array);
+
+                    // If the palette didn't change during compaction, do a simple copy of the data array
+                    if (hashPalette != null && hashPalette.getSize() == compactedPalette.getSize() && storage.getBits() == paletteProvider.calculateBitsForSerialization(idList, hashPalette.getSize())) { // paletteSize can de-sync from palette - see https://github.com/CaffeineMC/lithium-fabric/issues/279
+                        data = this.asOptional(storage.getRaw().clone());
+                        elements = hashPalette.getElements();
+                    } else {
+                        int bits = paletteProvider.calculateBitsForSerialization(idList, compactedPalette.getSize());
+                        if (bits != 0) {
+                            // Re-pack the integer array as the palette has changed size
+                            SimpleBitStorage copy = new SimpleBitStorage(bits, array.length);
+                            for (int i = 0; i < array.length; ++i) {
+                                copy.set(i, array[i]);
+                            }
+
+                            // We don't need to clone the data array as we are the sole owner of it
+                            data = this.asOptional(copy.getRaw());
+                        }
+
+                        elements = compactedPalette.getElements();
+                    }
+                }
+            } finally {
+                this.release();
             }
+            return new PalettedContainerRO.PackedData<>(elements, data);
+        } else {
+            PalettedContainerRO.PackedData var12;
+            try {
+                HashMapPalette<T> hashMapPalette = new HashMapPalette<>(idList, this.data.storage.getBits(), this.dummyPaletteResize);
+                int i = paletteProvider.size();
+                int[] is = new int[i];
+                this.data.storage.unpack(is);
+                swapPalette(is, (id) -> {
+                    return hashMapPalette.idFor(this.data.palette.valueFor(id));
+                });
+                int j = paletteProvider.calculateBitsForSerialization(idList, hashMapPalette.getSize());
+                Optional<LongStream> optional;
+                if (j != 0) {
+                    SimpleBitStorage simpleBitStorage = new SimpleBitStorage(j, i, is);
+                    optional = Optional.of(Arrays.stream(simpleBitStorage.getRaw()));
+                } else {
+                    optional = Optional.empty();
+                }
 
-            var12 = new PalettedContainerRO.PackedData<>(hashMapPalette.getEntries(), optional);
-        } finally {
-            this.release();
-        }
+                var12 = new PalettedContainerRO.PackedData<>(hashMapPalette.getEntries(), optional);
+            } finally {
+                this.release();
+            }
 
-        return var12;
+            return var12;
+        }
+        // Fusion end
     }
 
     private static <T> void swapPalette(int[] is, IntUnaryOperator applier) {
@@ -362,17 +426,51 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
 
     @Override
     public void count(PalettedContainer.CountConsumer<T> counter) {
-        if (this.data.palette.getSize() == 1) {
-            counter.accept(this.data.palette.valueFor(0), this.data.storage.getSize());
+        // Fusion start - Lithium: World Chunk Serialization
+        if (com.github.ipecter.fusion.FusionConfig.lithiumWorldChunkSerialization) {
+            int len = this.data.palette().getSize();
+
+            // Do not allocate huge arrays if we're using a large palette
+            if (len > 4096) {
+                // VanillaCopy
+                if (this.data.palette.getSize() == 1) {
+                    counter.accept(this.data.palette.valueFor(0), this.data.storage.getSize());
+                } else {
+                    Int2IntOpenHashMap int2IntOpenHashMap = new Int2IntOpenHashMap();
+                    this.data.storage.getAll((key) -> {
+                        int2IntOpenHashMap.addTo(key, 1);
+                    });
+                    int2IntOpenHashMap.int2IntEntrySet().forEach((entry) -> {
+                        counter.accept(this.data.palette.valueFor(entry.getIntKey()), entry.getIntValue());
+                    });
+                }
+            }
+
+            short[] counts = new short[len];
+
+            this.data.storage().getAll(i -> counts[i]++);
+
+            for (int i = 0; i < counts.length; i++) {
+                T obj = this.data.palette().valueFor(i);
+
+                if (obj != null) {
+                    counter.accept(obj, counts[i]);
+                }
+            }
         } else {
-            Int2IntOpenHashMap int2IntOpenHashMap = new Int2IntOpenHashMap();
-            this.data.storage.getAll((key) -> {
-                int2IntOpenHashMap.addTo(key, 1);
-            });
-            int2IntOpenHashMap.int2IntEntrySet().forEach((entry) -> {
-                counter.accept(this.data.palette.valueFor(entry.getIntKey()), entry.getIntValue());
-            });
+            if (this.data.palette.getSize() == 1) {
+                counter.accept(this.data.palette.valueFor(0), this.data.storage.getSize());
+            } else {
+                Int2IntOpenHashMap int2IntOpenHashMap = new Int2IntOpenHashMap();
+                this.data.storage.getAll((key) -> {
+                    int2IntOpenHashMap.addTo(key, 1);
+                });
+                int2IntOpenHashMap.int2IntEntrySet().forEach((entry) -> {
+                    counter.accept(this.data.palette.valueFor(entry.getIntKey()), entry.getIntValue());
+                });
+            }
         }
+        // Fusion end
     }
 
     static record Configuration<T>(Palette.Factory factory, int bits) {
