From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sat, 14 May 2022 17:36:33 +0900
Subject: [PATCH] Miscellaneous patches


diff --git a/build.gradle.kts b/build.gradle.kts
index 8e64ccdb928bc38cb703e60c8ec31339a6f6d894..dd8c91f73988a9ed972efbd33349de0d29bd6884 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -25,7 +25,7 @@ dependencies {
     // api dependencies are listed transitively to API consumers
     api("com.google.guava:guava:31.0.1-jre")
     api("com.google.code.gson:gson:2.8.9")
-    api("net.md-5:bungeecord-chat:1.16-R0.4-deprecated+build.6") // Paper
+    api("net.md-5:bungeecord-chat:1.19-R0.1-SNAPSHOT") // Paper // Prismarine
     api("org.yaml:snakeyaml:1.33")
     // Paper start
     api("com.googlecode.json-simple:json-simple:1.1.1") {
diff --git a/src/main/java/gg/pufferfish/pufferfish/simd/SIMDChecker.java b/src/main/java/gg/pufferfish/pufferfish/simd/SIMDChecker.java
index 93f5d7ca36e043e6c0f959450d38e6946b348eaf..4b802e5c4a286ef7f35447fdb60c86f6dbc75254 100644
--- a/src/main/java/gg/pufferfish/pufferfish/simd/SIMDChecker.java
+++ b/src/main/java/gg/pufferfish/pufferfish/simd/SIMDChecker.java
@@ -15,7 +15,7 @@ public class SIMDChecker {
 	@Deprecated
 	public static boolean canEnable(Logger logger) {
 		try {
-			if (SIMDDetection.getJavaVersion() != 17 && SIMDDetection.getJavaVersion() != 18) {
+			if (Boolean.getBoolean("Prismarine.SkipSIMDJavaVersionCheck") || SIMDDetection.getJavaVersion() != 17 && SIMDDetection.getJavaVersion() != 18 && SIMDDetection.getJavaVersion() != 19) { // Prismarine - Support Java 19
 				return false;
 			} else {
 				SIMDDetection.testRun = true;
diff --git a/src/main/java/org/bukkit/configuration/ConfigurationSection.java b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
index b6b00af08f12f838411845e4f4e29e62826dfc7f..4b5267576390515dbbdeed7a5752c80b6f951b34 100644
--- a/src/main/java/org/bukkit/configuration/ConfigurationSection.java
+++ b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
@@ -432,6 +432,48 @@ public interface ConfigurationSection {
      */
     public boolean isLong(@NotNull String path);
 
+    // Prismarine start - Float
+    /**
+     * Gets the requested float by path.
+     * <p>
+     * If the float does not exist but a default value has been specified,
+     * this will return the default value. If the float does not exist and no
+     * default value was specified, this will return 0.
+     *
+     * @param path Path of the float to get.
+     * @return Requested float.
+     */
+    public float getFloat(@NotNull String path);
+
+    /**
+     * Gets the requested float by path, returning a default value if not
+     * found.
+     * <p>
+     * If the float does not exist then the specified default value will
+     * returned regardless of if a default has been identified in the root
+     * {@link Configuration}.
+     *
+     * @param path Path of the float to get.
+     * @param def The default value to return if the path is not found or is
+     *     not a float.
+     * @return Requested float.
+     */
+    public float getFloat(@NotNull String path, float def);
+
+    /**
+     * Checks if the specified path is a float.
+     * <p>
+     * If the path exists but is not a float, this will return false. If the
+     * path does not exist, this will return false. If the path does not exist
+     * but a default value has been specified, this will check if that default
+     * value is a float and return appropriately.
+     *
+     * @param path Path of the float to check.
+     * @return Whether or not the specified path is a float.
+     */
+    public boolean isFloat(@NotNull String path);
+    // Prismarine end
+
     // Java
     /**
      * Gets the requested List by path.
diff --git a/src/main/java/org/bukkit/configuration/MemorySection.java b/src/main/java/org/bukkit/configuration/MemorySection.java
index 90751edd742d9b8d2171c4b16891aa009e4b8dfe..fd37d3437e4b75e7337019f3f7b40759548bccdb 100644
--- a/src/main/java/org/bukkit/configuration/MemorySection.java
+++ b/src/main/java/org/bukkit/configuration/MemorySection.java
@@ -419,6 +419,26 @@ public class MemorySection implements ConfigurationSection {
         return val instanceof Long;
     }
 
+    // Prismarine start - getFloat
+    @Override
+    public float getFloat(@NotNull String path) {
+        Object def = getDefault(path);
+        return getFloat(path, (def instanceof Number) ? toFloat(def) : 0);
+    }
+
+    @Override
+    public float getFloat(@NotNull String path, float def) {
+        Object val = get(path, def);
+        return (val instanceof Number) ? toFloat(val) : def;
+    }
+
+    @Override
+    public boolean isFloat(@NotNull String path) {
+        Object val = get(path);
+        return val instanceof Float;
+    }
+    // Prismarine end
+
     // Java
     @Override
     @Nullable
